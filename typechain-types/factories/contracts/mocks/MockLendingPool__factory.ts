/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockLendingPool,
  MockLendingPoolInterface,
} from "../../../contracts/mocks/MockLendingPool";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "loanId",
        type: "uint256",
      },
    ],
    name: "getLoan",
    outputs: [
      {
        internalType: "address",
        name: "borrower",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "collateralAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrowedAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "interestRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "loanId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "liquidator",
        type: "address",
      },
    ],
    name: "liquidateLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "loans",
    outputs: [
      {
        internalType: "address",
        name: "borrower",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "collateralAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrowedAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "interestRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "loanId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "borrower",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "collateralAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrowedAmount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
    ],
    name: "setLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061034c806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063504006ca146100515780636cc6fdd51461012357806379b2e89f146101da578063e1ec3c6814610204575b600080fd5b6100de61005f36600461025c565b60009081526020818152604091829020825160e08101845281546001600160a01b031680825260018301549382018490526002830154948201859052600383015460608301819052600484015460808401819052600585015460a0850181905260069095015460ff16151560c090940184905291969495949093919290565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a0830152151560c082015260e00160405180910390f35b6101d8610131366004610291565b6040805160e0810182526001600160a01b039586168152602080820195865281830194855260006060830181815242608085019081526301e1338060a0860190815296151560c086019081529a835292829052939020915182546001600160a01b0319169716969096178155935160018501559151600284015590516003830155915160048201559051600582015590516006909101805460ff1916911515919091179055565b005b6101d86101e83660046102ea565b506000908152602081905260409020600601805460ff19169055565b6100de61021236600461025c565b60006020819052908152604090208054600182015460028301546003840154600485015460058601546006909601546001600160a01b039095169593949293919290919060ff1687565b60006020828403121561026e57600080fd5b5035919050565b80356001600160a01b038116811461028c57600080fd5b919050565b600080600080600060a086880312156102a957600080fd5b853594506102b960208701610275565b93506040860135925060608601359150608086013580151581146102dc57600080fd5b809150509295509295909350565b600080604083850312156102fd57600080fd5b8235915061030d60208401610275565b9050925092905056fea26469706673582212203d3bb55dc0df3b5dcca95c5e0fa3872f9c7314c1e1953ae0925febb3ed94dbc164736f6c63430008160033";

type MockLendingPoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockLendingPoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockLendingPool__factory extends ContractFactory {
  constructor(...args: MockLendingPoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockLendingPool & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockLendingPool__factory {
    return super.connect(runner) as MockLendingPool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockLendingPoolInterface {
    return new Interface(_abi) as MockLendingPoolInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockLendingPool {
    return new Contract(address, _abi, runner) as unknown as MockLendingPool;
  }
}
