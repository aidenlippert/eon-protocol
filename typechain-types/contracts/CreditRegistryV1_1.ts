/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CreditRegistryV1_1 {
  export type CreditScoreStruct = {
    score: BigNumberish;
    tier: BigNumberish;
    ltv: BigNumberish;
    interestRateMultiplier: BigNumberish;
    lastUpdated: BigNumberish;
    dataQuality: BigNumberish;
  };

  export type CreditScoreStructOutput = [
    score: bigint,
    tier: bigint,
    ltv: bigint,
    interestRateMultiplier: bigint,
    lastUpdated: bigint,
    dataQuality: bigint
  ] & {
    score: bigint;
    tier: bigint;
    ltv: bigint;
    interestRateMultiplier: bigint;
    lastUpdated: bigint;
    dataQuality: bigint;
  };
}

export interface CreditRegistryV1_1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "attestScore"
      | "authorizedAttesters"
      | "challengeBond"
      | "challengePeriod"
      | "challengeRewardBps"
      | "challengeScore"
      | "challenges"
      | "emergencyWithdraw"
      | "finalizeScore"
      | "getScore"
      | "hasValidScore"
      | "owner"
      | "pendingAttestations"
      | "renounceOwnership"
      | "resolveChallenge"
      | "scores"
      | "setAuthorizedAttester"
      | "setChallengeBond"
      | "setChallengePeriod"
      | "setTreasury"
      | "transferOwnership"
      | "treasury"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AttesterAuthorized"
      | "ChallengeBondUpdated"
      | "ChallengePeriodUpdated"
      | "ChallengeResolved"
      | "OwnershipTransferred"
      | "ScoreAttested"
      | "ScoreChallenged"
      | "ScoreFinalized"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "attestScore",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAttesters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeBond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengeRewardBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengeScore",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challenges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeScore",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasValidScore",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingAttestations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveChallenge",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "scores", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedAttester",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setChallengeBond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChallengePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "attestScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAttesters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeRewardBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "challenges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasValidScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAttestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scores", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChallengeBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChallengePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
}

export namespace AttesterAuthorizedEvent {
  export type InputTuple = [attester: AddressLike, authorized: boolean];
  export type OutputTuple = [attester: string, authorized: boolean];
  export interface OutputObject {
    attester: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengeBondUpdatedEvent {
  export type InputTuple = [newBond: BigNumberish];
  export type OutputTuple = [newBond: bigint];
  export interface OutputObject {
    newBond: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengePeriodUpdatedEvent {
  export type InputTuple = [newPeriod: BigNumberish];
  export type OutputTuple = [newPeriod: bigint];
  export interface OutputObject {
    newPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengeResolvedEvent {
  export type InputTuple = [
    user: AddressLike,
    challenger: AddressLike,
    successful: boolean,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    challenger: string,
    successful: boolean,
    reward: bigint
  ];
  export interface OutputObject {
    user: string;
    challenger: string;
    successful: boolean;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoreAttestedEvent {
  export type InputTuple = [
    user: AddressLike,
    score: BigNumberish,
    tier: BigNumberish,
    merkleRoot: BytesLike,
    attester: AddressLike,
    challengeDeadline: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    score: bigint,
    tier: bigint,
    merkleRoot: string,
    attester: string,
    challengeDeadline: bigint
  ];
  export interface OutputObject {
    user: string;
    score: bigint;
    tier: bigint;
    merkleRoot: string;
    attester: string;
    challengeDeadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoreChallengedEvent {
  export type InputTuple = [
    user: AddressLike,
    challenger: AddressLike,
    bond: BigNumberish,
    reason: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    challenger: string,
    bond: bigint,
    reason: bigint
  ];
  export interface OutputObject {
    user: string;
    challenger: string;
    bond: bigint;
    reason: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoreFinalizedEvent {
  export type InputTuple = [
    user: AddressLike,
    score: BigNumberish,
    tier: BigNumberish,
    ltv: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    score: bigint,
    tier: bigint,
    ltv: bigint
  ];
  export interface OutputObject {
    user: string;
    score: bigint;
    tier: bigint;
    ltv: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CreditRegistryV1_1 extends BaseContract {
  connect(runner?: ContractRunner | null): CreditRegistryV1_1;
  waitForDeployment(): Promise<this>;

  interface: CreditRegistryV1_1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  attestScore: TypedContractMethod<
    [
      user: AddressLike,
      score: BigNumberish,
      tier: BigNumberish,
      ltv: BigNumberish,
      interestRateMultiplier: BigNumberish,
      dataQuality: BigNumberish,
      merkleRoot: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  authorizedAttesters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  challengeBond: TypedContractMethod<[], [bigint], "view">;

  challengePeriod: TypedContractMethod<[], [bigint], "view">;

  challengeRewardBps: TypedContractMethod<[], [bigint], "view">;

  challengeScore: TypedContractMethod<
    [user: AddressLike, reason: BigNumberish],
    [void],
    "payable"
  >;

  challenges: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean, boolean] & {
        challenger: string;
        bond: bigint;
        reason: bigint;
        resolved: boolean;
        successful: boolean;
      }
    ],
    "view"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  finalizeScore: TypedContractMethod<
    [
      user: AddressLike,
      score: BigNumberish,
      tier: BigNumberish,
      ltv: BigNumberish,
      interestRateMultiplier: BigNumberish,
      dataQuality: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getScore: TypedContractMethod<
    [user: AddressLike],
    [CreditRegistryV1_1.CreditScoreStructOutput],
    "view"
  >;

  hasValidScore: TypedContractMethod<
    [user: AddressLike, maxAge: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingAttestations: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, bigint, boolean, boolean] & {
        scoreHash: string;
        merkleRoot: string;
        attester: string;
        timestamp: bigint;
        challengeDeadline: bigint;
        challenged: boolean;
        finalized: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveChallenge: TypedContractMethod<
    [
      user: AddressLike,
      score: BigNumberish,
      tier: BigNumberish,
      ltv: BigNumberish,
      interestRateMultiplier: BigNumberish,
      dataQuality: BigNumberish,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  scores: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        score: bigint;
        tier: bigint;
        ltv: bigint;
        interestRateMultiplier: bigint;
        lastUpdated: bigint;
        dataQuality: bigint;
      }
    ],
    "view"
  >;

  setAuthorizedAttester: TypedContractMethod<
    [attester: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  setChallengeBond: TypedContractMethod<
    [newBond: BigNumberish],
    [void],
    "nonpayable"
  >;

  setChallengePeriod: TypedContractMethod<
    [newPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [newTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "attestScore"
  ): TypedContractMethod<
    [
      user: AddressLike,
      score: BigNumberish,
      tier: BigNumberish,
      ltv: BigNumberish,
      interestRateMultiplier: BigNumberish,
      dataQuality: BigNumberish,
      merkleRoot: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedAttesters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "challengeBond"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "challengePeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "challengeRewardBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "challengeScore"
  ): TypedContractMethod<
    [user: AddressLike, reason: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "challenges"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean, boolean] & {
        challenger: string;
        bond: bigint;
        reason: bigint;
        resolved: boolean;
        successful: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "finalizeScore"
  ): TypedContractMethod<
    [
      user: AddressLike,
      score: BigNumberish,
      tier: BigNumberish,
      ltv: BigNumberish,
      interestRateMultiplier: BigNumberish,
      dataQuality: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getScore"
  ): TypedContractMethod<
    [user: AddressLike],
    [CreditRegistryV1_1.CreditScoreStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasValidScore"
  ): TypedContractMethod<
    [user: AddressLike, maxAge: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingAttestations"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, bigint, boolean, boolean] & {
        scoreHash: string;
        merkleRoot: string;
        attester: string;
        timestamp: bigint;
        challengeDeadline: bigint;
        challenged: boolean;
        finalized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveChallenge"
  ): TypedContractMethod<
    [
      user: AddressLike,
      score: BigNumberish,
      tier: BigNumberish,
      ltv: BigNumberish,
      interestRateMultiplier: BigNumberish,
      dataQuality: BigNumberish,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "scores"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        score: bigint;
        tier: bigint;
        ltv: bigint;
        interestRateMultiplier: bigint;
        lastUpdated: bigint;
        dataQuality: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedAttester"
  ): TypedContractMethod<
    [attester: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setChallengeBond"
  ): TypedContractMethod<[newBond: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setChallengePeriod"
  ): TypedContractMethod<[newPeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[newTreasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AttesterAuthorized"
  ): TypedContractEvent<
    AttesterAuthorizedEvent.InputTuple,
    AttesterAuthorizedEvent.OutputTuple,
    AttesterAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "ChallengeBondUpdated"
  ): TypedContractEvent<
    ChallengeBondUpdatedEvent.InputTuple,
    ChallengeBondUpdatedEvent.OutputTuple,
    ChallengeBondUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ChallengePeriodUpdated"
  ): TypedContractEvent<
    ChallengePeriodUpdatedEvent.InputTuple,
    ChallengePeriodUpdatedEvent.OutputTuple,
    ChallengePeriodUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ChallengeResolved"
  ): TypedContractEvent<
    ChallengeResolvedEvent.InputTuple,
    ChallengeResolvedEvent.OutputTuple,
    ChallengeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ScoreAttested"
  ): TypedContractEvent<
    ScoreAttestedEvent.InputTuple,
    ScoreAttestedEvent.OutputTuple,
    ScoreAttestedEvent.OutputObject
  >;
  getEvent(
    key: "ScoreChallenged"
  ): TypedContractEvent<
    ScoreChallengedEvent.InputTuple,
    ScoreChallengedEvent.OutputTuple,
    ScoreChallengedEvent.OutputObject
  >;
  getEvent(
    key: "ScoreFinalized"
  ): TypedContractEvent<
    ScoreFinalizedEvent.InputTuple,
    ScoreFinalizedEvent.OutputTuple,
    ScoreFinalizedEvent.OutputObject
  >;

  filters: {
    "AttesterAuthorized(address,bool)": TypedContractEvent<
      AttesterAuthorizedEvent.InputTuple,
      AttesterAuthorizedEvent.OutputTuple,
      AttesterAuthorizedEvent.OutputObject
    >;
    AttesterAuthorized: TypedContractEvent<
      AttesterAuthorizedEvent.InputTuple,
      AttesterAuthorizedEvent.OutputTuple,
      AttesterAuthorizedEvent.OutputObject
    >;

    "ChallengeBondUpdated(uint256)": TypedContractEvent<
      ChallengeBondUpdatedEvent.InputTuple,
      ChallengeBondUpdatedEvent.OutputTuple,
      ChallengeBondUpdatedEvent.OutputObject
    >;
    ChallengeBondUpdated: TypedContractEvent<
      ChallengeBondUpdatedEvent.InputTuple,
      ChallengeBondUpdatedEvent.OutputTuple,
      ChallengeBondUpdatedEvent.OutputObject
    >;

    "ChallengePeriodUpdated(uint256)": TypedContractEvent<
      ChallengePeriodUpdatedEvent.InputTuple,
      ChallengePeriodUpdatedEvent.OutputTuple,
      ChallengePeriodUpdatedEvent.OutputObject
    >;
    ChallengePeriodUpdated: TypedContractEvent<
      ChallengePeriodUpdatedEvent.InputTuple,
      ChallengePeriodUpdatedEvent.OutputTuple,
      ChallengePeriodUpdatedEvent.OutputObject
    >;

    "ChallengeResolved(address,address,bool,uint256)": TypedContractEvent<
      ChallengeResolvedEvent.InputTuple,
      ChallengeResolvedEvent.OutputTuple,
      ChallengeResolvedEvent.OutputObject
    >;
    ChallengeResolved: TypedContractEvent<
      ChallengeResolvedEvent.InputTuple,
      ChallengeResolvedEvent.OutputTuple,
      ChallengeResolvedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ScoreAttested(address,uint16,uint8,bytes32,address,uint64)": TypedContractEvent<
      ScoreAttestedEvent.InputTuple,
      ScoreAttestedEvent.OutputTuple,
      ScoreAttestedEvent.OutputObject
    >;
    ScoreAttested: TypedContractEvent<
      ScoreAttestedEvent.InputTuple,
      ScoreAttestedEvent.OutputTuple,
      ScoreAttestedEvent.OutputObject
    >;

    "ScoreChallenged(address,address,uint256,uint8)": TypedContractEvent<
      ScoreChallengedEvent.InputTuple,
      ScoreChallengedEvent.OutputTuple,
      ScoreChallengedEvent.OutputObject
    >;
    ScoreChallenged: TypedContractEvent<
      ScoreChallengedEvent.InputTuple,
      ScoreChallengedEvent.OutputTuple,
      ScoreChallengedEvent.OutputObject
    >;

    "ScoreFinalized(address,uint16,uint8,uint8)": TypedContractEvent<
      ScoreFinalizedEvent.InputTuple,
      ScoreFinalizedEvent.OutputTuple,
      ScoreFinalizedEvent.OutputObject
    >;
    ScoreFinalized: TypedContractEvent<
      ScoreFinalizedEvent.InputTuple,
      ScoreFinalizedEvent.OutputTuple,
      ScoreFinalizedEvent.OutputObject
    >;
  };
}
