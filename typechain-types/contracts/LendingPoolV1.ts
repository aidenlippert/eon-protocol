/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace LendingPoolV1 {
  export type AssetConfigStruct = {
    enabled: boolean;
    totalDeposited: BigNumberish;
    totalBorrowed: BigNumberish;
    utilizationRate: BigNumberish;
    borrowRate: BigNumberish;
    supplyRate: BigNumberish;
  };

  export type AssetConfigStructOutput = [
    enabled: boolean,
    totalDeposited: bigint,
    totalBorrowed: bigint,
    utilizationRate: bigint,
    borrowRate: bigint,
    supplyRate: bigint
  ] & {
    enabled: boolean;
    totalDeposited: bigint;
    totalBorrowed: bigint;
    utilizationRate: bigint;
    borrowRate: bigint;
    supplyRate: bigint;
  };

  export type UserPositionStruct = {
    collateralAmount: BigNumberish;
    borrowedAmount: BigNumberish;
    collateralAsset: AddressLike;
    lastAccrualTimestamp: BigNumberish;
    healthFactor: BigNumberish;
    creditTier: BigNumberish;
  };

  export type UserPositionStructOutput = [
    collateralAmount: bigint,
    borrowedAmount: bigint,
    collateralAsset: string,
    lastAccrualTimestamp: bigint,
    healthFactor: bigint,
    creditTier: bigint
  ] & {
    collateralAmount: bigint;
    borrowedAmount: bigint;
    collateralAsset: string;
    lastAccrualTimestamp: bigint;
    healthFactor: bigint;
    creditTier: bigint;
  };
}

export interface LendingPoolV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_RATE"
      | "BRONZE_LTV"
      | "BRONZE_PREMIUM"
      | "GOLD_LTV"
      | "GOLD_PREMIUM"
      | "MIN_HEALTH_FACTOR"
      | "OPTIMAL_UTILIZATION"
      | "PLATINUM_LTV"
      | "PLATINUM_PREMIUM"
      | "SILVER_LTV"
      | "SILVER_PREMIUM"
      | "SLOPE_1"
      | "SLOPE_2"
      | "assetConfigs"
      | "borrow"
      | "creditRegistry"
      | "deposit"
      | "enableAsset"
      | "getAssetConfig"
      | "getBorrowRate"
      | "getPosition"
      | "liquidate"
      | "lpDeposits"
      | "owner"
      | "positions"
      | "protocolFeePercentage"
      | "renounceOwnership"
      | "repay"
      | "setProtocolFee"
      | "setTreasury"
      | "supportedBorrowable"
      | "supportedCollateral"
      | "transferOwnership"
      | "treasury"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetEnabled"
      | "Borrow"
      | "Deposit"
      | "InterestAccrued"
      | "Liquidate"
      | "OwnershipTransferred"
      | "Repay"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BASE_RATE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BRONZE_LTV",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BRONZE_PREMIUM",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GOLD_LTV", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GOLD_PREMIUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_HEALTH_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPTIMAL_UTILIZATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATINUM_LTV",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATINUM_PREMIUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SILVER_LTV",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SILVER_PREMIUM",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SLOPE_1", values?: undefined): string;
  encodeFunctionData(functionFragment: "SLOPE_2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetConfigs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enableAsset",
    values: [AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetConfig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowRate",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lpDeposits",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedBorrowable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BASE_RATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BRONZE_LTV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BRONZE_PREMIUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GOLD_LTV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GOLD_PREMIUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_HEALTH_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPTIMAL_UTILIZATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATINUM_LTV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATINUM_PREMIUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SILVER_LTV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SILVER_PREMIUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SLOPE_1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SLOPE_2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creditRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpDeposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedBorrowable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AssetEnabledEvent {
  export type InputTuple = [
    asset: AddressLike,
    collateral: boolean,
    borrowable: boolean
  ];
  export type OutputTuple = [
    asset: string,
    collateral: boolean,
    borrowable: boolean
  ];
  export interface OutputObject {
    asset: string;
    collateral: boolean;
    borrowable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowEvent {
  export type InputTuple = [
    user: AddressLike,
    borrowAsset: AddressLike,
    collateralAsset: AddressLike,
    borrowAmount: BigNumberish,
    collateralAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    borrowAsset: string,
    collateralAsset: string,
    borrowAmount: bigint,
    collateralAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    borrowAsset: string;
    collateralAsset: string;
    borrowAmount: bigint;
    collateralAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    lp: AddressLike,
    asset: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [lp: string, asset: string, amount: bigint];
  export interface OutputObject {
    lp: string;
    asset: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InterestAccruedEvent {
  export type InputTuple = [
    user: AddressLike,
    asset: AddressLike,
    interestAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    asset: string,
    interestAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    asset: string;
    interestAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateEvent {
  export type InputTuple = [
    user: AddressLike,
    liquidator: AddressLike,
    debtRepaid: BigNumberish,
    collateralSeized: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    liquidator: string,
    debtRepaid: bigint,
    collateralSeized: bigint
  ];
  export interface OutputObject {
    user: string;
    liquidator: string;
    debtRepaid: bigint;
    collateralSeized: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayEvent {
  export type InputTuple = [
    user: AddressLike,
    asset: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, asset: string, amount: bigint];
  export interface OutputObject {
    user: string;
    asset: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    lp: AddressLike,
    asset: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [lp: string, asset: string, amount: bigint];
  export interface OutputObject {
    lp: string;
    asset: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LendingPoolV1 extends BaseContract {
  connect(runner?: ContractRunner | null): LendingPoolV1;
  waitForDeployment(): Promise<this>;

  interface: LendingPoolV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_RATE: TypedContractMethod<[], [bigint], "view">;

  BRONZE_LTV: TypedContractMethod<[], [bigint], "view">;

  BRONZE_PREMIUM: TypedContractMethod<[], [bigint], "view">;

  GOLD_LTV: TypedContractMethod<[], [bigint], "view">;

  GOLD_PREMIUM: TypedContractMethod<[], [bigint], "view">;

  MIN_HEALTH_FACTOR: TypedContractMethod<[], [bigint], "view">;

  OPTIMAL_UTILIZATION: TypedContractMethod<[], [bigint], "view">;

  PLATINUM_LTV: TypedContractMethod<[], [bigint], "view">;

  PLATINUM_PREMIUM: TypedContractMethod<[], [bigint], "view">;

  SILVER_LTV: TypedContractMethod<[], [bigint], "view">;

  SILVER_PREMIUM: TypedContractMethod<[], [bigint], "view">;

  SLOPE_1: TypedContractMethod<[], [bigint], "view">;

  SLOPE_2: TypedContractMethod<[], [bigint], "view">;

  assetConfigs: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint] & {
        enabled: boolean;
        totalDeposited: bigint;
        totalBorrowed: bigint;
        utilizationRate: bigint;
        borrowRate: bigint;
        supplyRate: bigint;
      }
    ],
    "view"
  >;

  borrow: TypedContractMethod<
    [
      borrowAsset: AddressLike,
      collateralAsset: AddressLike,
      borrowAmount: BigNumberish,
      collateralAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  creditRegistry: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  enableAsset: TypedContractMethod<
    [asset: AddressLike, collateral: boolean, borrowable: boolean],
    [void],
    "nonpayable"
  >;

  getAssetConfig: TypedContractMethod<
    [asset: AddressLike],
    [LendingPoolV1.AssetConfigStructOutput],
    "view"
  >;

  getBorrowRate: TypedContractMethod<
    [user: AddressLike, asset: AddressLike],
    [bigint],
    "view"
  >;

  getPosition: TypedContractMethod<
    [user: AddressLike, asset: AddressLike],
    [LendingPoolV1.UserPositionStructOutput],
    "view"
  >;

  liquidate: TypedContractMethod<
    [user: AddressLike, asset: AddressLike, debtAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  lpDeposits: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  positions: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [bigint, bigint, string, bigint, bigint, bigint] & {
        collateralAmount: bigint;
        borrowedAmount: bigint;
        collateralAsset: string;
        lastAccrualTimestamp: bigint;
        healthFactor: bigint;
        creditTier: bigint;
      }
    ],
    "view"
  >;

  protocolFeePercentage: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repay: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [newTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  supportedBorrowable: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  supportedCollateral: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BRONZE_LTV"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BRONZE_PREMIUM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GOLD_LTV"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GOLD_PREMIUM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_HEALTH_FACTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OPTIMAL_UTILIZATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PLATINUM_LTV"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PLATINUM_PREMIUM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SILVER_LTV"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SILVER_PREMIUM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SLOPE_1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SLOPE_2"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "assetConfigs"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint] & {
        enabled: boolean;
        totalDeposited: bigint;
        totalBorrowed: bigint;
        utilizationRate: bigint;
        borrowRate: bigint;
        supplyRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [
      borrowAsset: AddressLike,
      collateralAsset: AddressLike,
      borrowAmount: BigNumberish,
      collateralAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creditRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enableAsset"
  ): TypedContractMethod<
    [asset: AddressLike, collateral: boolean, borrowable: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAssetConfig"
  ): TypedContractMethod<
    [asset: AddressLike],
    [LendingPoolV1.AssetConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBorrowRate"
  ): TypedContractMethod<
    [user: AddressLike, asset: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [user: AddressLike, asset: AddressLike],
    [LendingPoolV1.UserPositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [user: AddressLike, asset: AddressLike, debtAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lpDeposits"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "positions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [bigint, bigint, string, bigint, bigint, bigint] & {
        collateralAmount: bigint;
        borrowedAmount: bigint;
        collateralAsset: string;
        lastAccrualTimestamp: bigint;
        healthFactor: bigint;
        creditTier: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtocolFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[newTreasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportedBorrowable"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "supportedCollateral"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AssetEnabled"
  ): TypedContractEvent<
    AssetEnabledEvent.InputTuple,
    AssetEnabledEvent.OutputTuple,
    AssetEnabledEvent.OutputObject
  >;
  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "InterestAccrued"
  ): TypedContractEvent<
    InterestAccruedEvent.InputTuple,
    InterestAccruedEvent.OutputTuple,
    InterestAccruedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidate"
  ): TypedContractEvent<
    LiquidateEvent.InputTuple,
    LiquidateEvent.OutputTuple,
    LiquidateEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Repay"
  ): TypedContractEvent<
    RepayEvent.InputTuple,
    RepayEvent.OutputTuple,
    RepayEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "AssetEnabled(address,bool,bool)": TypedContractEvent<
      AssetEnabledEvent.InputTuple,
      AssetEnabledEvent.OutputTuple,
      AssetEnabledEvent.OutputObject
    >;
    AssetEnabled: TypedContractEvent<
      AssetEnabledEvent.InputTuple,
      AssetEnabledEvent.OutputTuple,
      AssetEnabledEvent.OutputObject
    >;

    "Borrow(address,address,address,uint256,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "Deposit(address,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "InterestAccrued(address,address,uint256)": TypedContractEvent<
      InterestAccruedEvent.InputTuple,
      InterestAccruedEvent.OutputTuple,
      InterestAccruedEvent.OutputObject
    >;
    InterestAccrued: TypedContractEvent<
      InterestAccruedEvent.InputTuple,
      InterestAccruedEvent.OutputTuple,
      InterestAccruedEvent.OutputObject
    >;

    "Liquidate(address,address,uint256,uint256)": TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;
    Liquidate: TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Repay(address,address,uint256)": TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;
    Repay: TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;

    "Withdraw(address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
