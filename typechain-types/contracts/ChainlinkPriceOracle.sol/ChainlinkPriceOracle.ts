/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ChainlinkPriceOracle {
  export type PriceFeedConfigStruct = {
    feed: AddressLike;
    heartbeat: BigNumberish;
    decimals: BigNumberish;
    isActive: boolean;
  };

  export type PriceFeedConfigStructOutput = [
    feed: string,
    heartbeat: bigint,
    decimals: bigint,
    isActive: boolean
  ] & { feed: string; heartbeat: bigint; decimals: bigint; isActive: boolean };
}

export interface ChainlinkPriceOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activatePriceFeed"
      | "deactivatePriceFeed"
      | "emergencyPaused"
      | "fallbackOracle"
      | "getPrice"
      | "getPriceFeedConfig"
      | "getPriceWithFallback"
      | "getPrices"
      | "isPriceFeedActive"
      | "maxDeviationBps"
      | "owner"
      | "priceFeeds"
      | "renounceOwnership"
      | "setEmergencyPause"
      | "setFallbackOracle"
      | "setMaxDeviationBps"
      | "setPriceFeed"
      | "tokenToUsd"
      | "transferOwnership"
      | "usdToToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyPause"
      | "FallbackOracleSet"
      | "OwnershipTransferred"
      | "PriceDeviation"
      | "PriceFeedUpdated"
      | "StalePrice"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activatePriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivatePriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fallbackOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFeedConfig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceWithFallback",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrices",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isPriceFeedActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeviationBps",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFallbackOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDeviationBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToUsd",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usdToToken",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "activatePriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivatePriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fallbackOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFeedConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceWithFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPriceFeedActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDeviationBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDeviationBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenToUsd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdToToken", data: BytesLike): Result;
}

export namespace EmergencyPauseEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FallbackOracleSetEvent {
  export type InputTuple = [fallbackOracle: AddressLike];
  export type OutputTuple = [fallbackOracle: string];
  export interface OutputObject {
    fallbackOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceDeviationEvent {
  export type InputTuple = [
    token: AddressLike,
    price1: BigNumberish,
    price2: BigNumberish,
    deviationBps: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    price1: bigint,
    price2: bigint,
    deviationBps: bigint
  ];
  export interface OutputObject {
    token: string;
    price1: bigint;
    price2: bigint;
    deviationBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceFeedUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    feed: AddressLike,
    heartbeat: BigNumberish
  ];
  export type OutputTuple = [token: string, feed: string, heartbeat: bigint];
  export interface OutputObject {
    token: string;
    feed: string;
    heartbeat: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StalePriceEvent {
  export type InputTuple = [
    token: AddressLike,
    age: BigNumberish,
    maxAge: BigNumberish
  ];
  export type OutputTuple = [token: string, age: bigint, maxAge: bigint];
  export interface OutputObject {
    token: string;
    age: bigint;
    maxAge: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainlinkPriceOracle extends BaseContract {
  connect(runner?: ContractRunner | null): ChainlinkPriceOracle;
  waitForDeployment(): Promise<this>;

  interface: ChainlinkPriceOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activatePriceFeed: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  deactivatePriceFeed: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  emergencyPaused: TypedContractMethod<[], [boolean], "view">;

  fallbackOracle: TypedContractMethod<[], [string], "view">;

  getPrice: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  getPriceFeedConfig: TypedContractMethod<
    [token: AddressLike],
    [ChainlinkPriceOracle.PriceFeedConfigStructOutput],
    "view"
  >;

  getPriceWithFallback: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  getPrices: TypedContractMethod<[tokens: AddressLike[]], [bigint[]], "view">;

  isPriceFeedActive: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    "view"
  >;

  maxDeviationBps: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  priceFeeds: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        feed: string;
        heartbeat: bigint;
        decimals: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setEmergencyPause: TypedContractMethod<
    [_paused: boolean],
    [void],
    "nonpayable"
  >;

  setFallbackOracle: TypedContractMethod<
    [_fallbackOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaxDeviationBps: TypedContractMethod<
    [_maxDeviationBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPriceFeed: TypedContractMethod<
    [token: AddressLike, feed: AddressLike, heartbeat: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokenToUsd: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdToToken: TypedContractMethod<
    [token: AddressLike, valueUsd18: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activatePriceFeed"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deactivatePriceFeed"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "fallbackOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriceFeedConfig"
  ): TypedContractMethod<
    [token: AddressLike],
    [ChainlinkPriceOracle.PriceFeedConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceWithFallback"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPrices"
  ): TypedContractMethod<[tokens: AddressLike[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isPriceFeedActive"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxDeviationBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceFeeds"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        feed: string;
        heartbeat: bigint;
        decimals: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEmergencyPause"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFallbackOracle"
  ): TypedContractMethod<[_fallbackOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxDeviationBps"
  ): TypedContractMethod<
    [_maxDeviationBps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceFeed"
  ): TypedContractMethod<
    [token: AddressLike, feed: AddressLike, heartbeat: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenToUsd"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdToToken"
  ): TypedContractMethod<
    [token: AddressLike, valueUsd18: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "EmergencyPause"
  ): TypedContractEvent<
    EmergencyPauseEvent.InputTuple,
    EmergencyPauseEvent.OutputTuple,
    EmergencyPauseEvent.OutputObject
  >;
  getEvent(
    key: "FallbackOracleSet"
  ): TypedContractEvent<
    FallbackOracleSetEvent.InputTuple,
    FallbackOracleSetEvent.OutputTuple,
    FallbackOracleSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceDeviation"
  ): TypedContractEvent<
    PriceDeviationEvent.InputTuple,
    PriceDeviationEvent.OutputTuple,
    PriceDeviationEvent.OutputObject
  >;
  getEvent(
    key: "PriceFeedUpdated"
  ): TypedContractEvent<
    PriceFeedUpdatedEvent.InputTuple,
    PriceFeedUpdatedEvent.OutputTuple,
    PriceFeedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "StalePrice"
  ): TypedContractEvent<
    StalePriceEvent.InputTuple,
    StalePriceEvent.OutputTuple,
    StalePriceEvent.OutputObject
  >;

  filters: {
    "EmergencyPause(bool)": TypedContractEvent<
      EmergencyPauseEvent.InputTuple,
      EmergencyPauseEvent.OutputTuple,
      EmergencyPauseEvent.OutputObject
    >;
    EmergencyPause: TypedContractEvent<
      EmergencyPauseEvent.InputTuple,
      EmergencyPauseEvent.OutputTuple,
      EmergencyPauseEvent.OutputObject
    >;

    "FallbackOracleSet(address)": TypedContractEvent<
      FallbackOracleSetEvent.InputTuple,
      FallbackOracleSetEvent.OutputTuple,
      FallbackOracleSetEvent.OutputObject
    >;
    FallbackOracleSet: TypedContractEvent<
      FallbackOracleSetEvent.InputTuple,
      FallbackOracleSetEvent.OutputTuple,
      FallbackOracleSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceDeviation(address,int256,int256,uint256)": TypedContractEvent<
      PriceDeviationEvent.InputTuple,
      PriceDeviationEvent.OutputTuple,
      PriceDeviationEvent.OutputObject
    >;
    PriceDeviation: TypedContractEvent<
      PriceDeviationEvent.InputTuple,
      PriceDeviationEvent.OutputTuple,
      PriceDeviationEvent.OutputObject
    >;

    "PriceFeedUpdated(address,address,uint32)": TypedContractEvent<
      PriceFeedUpdatedEvent.InputTuple,
      PriceFeedUpdatedEvent.OutputTuple,
      PriceFeedUpdatedEvent.OutputObject
    >;
    PriceFeedUpdated: TypedContractEvent<
      PriceFeedUpdatedEvent.InputTuple,
      PriceFeedUpdatedEvent.OutputTuple,
      PriceFeedUpdatedEvent.OutputObject
    >;

    "StalePrice(address,uint256,uint256)": TypedContractEvent<
      StalePriceEvent.InputTuple,
      StalePriceEvent.OutputTuple,
      StalePriceEvent.OutputObject
    >;
    StalePrice: TypedContractEvent<
      StalePriceEvent.InputTuple,
      StalePriceEvent.OutputTuple,
      StalePriceEvent.OutputObject
    >;
  };
}
