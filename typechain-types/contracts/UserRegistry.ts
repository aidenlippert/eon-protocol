/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface UserRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_LINKED_WALLETS"
      | "changePrimaryWallet"
      | "emergencyUnlinkWallet"
      | "getAllWalletsForAddress"
      | "getMyWallets"
      | "getUserInfo"
      | "getUserWallets"
      | "isWalletRegistered"
      | "kycHashUsed"
      | "linkWallet"
      | "owner"
      | "registerUser"
      | "renounceOwnership"
      | "totalUsers"
      | "transferOwnership"
      | "unlinkWallet"
      | "users"
      | "walletToKycHash"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PrimaryWalletChanged"
      | "UserRegistered"
      | "WalletLinked"
      | "WalletUnlinked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_LINKED_WALLETS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changePrimaryWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnlinkWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllWalletsForAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyWallets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserWallets",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWalletRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "kycHashUsed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "walletToKycHash",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_LINKED_WALLETS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePrimaryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnlinkWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllWalletsForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWalletRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kycHashUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "linkWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlinkWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "walletToKycHash",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrimaryWalletChangedEvent {
  export type InputTuple = [
    kycHash: BytesLike,
    oldPrimary: AddressLike,
    newPrimary: AddressLike
  ];
  export type OutputTuple = [
    kycHash: string,
    oldPrimary: string,
    newPrimary: string
  ];
  export interface OutputObject {
    kycHash: string;
    oldPrimary: string;
    newPrimary: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [
    kycHash: BytesLike,
    primaryWallet: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    kycHash: string,
    primaryWallet: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    kycHash: string;
    primaryWallet: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletLinkedEvent {
  export type InputTuple = [
    kycHash: BytesLike,
    wallet: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    kycHash: string,
    wallet: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    kycHash: string;
    wallet: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletUnlinkedEvent {
  export type InputTuple = [
    kycHash: BytesLike,
    wallet: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    kycHash: string,
    wallet: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    kycHash: string;
    wallet: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UserRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): UserRegistry;
  waitForDeployment(): Promise<this>;

  interface: UserRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_LINKED_WALLETS: TypedContractMethod<[], [bigint], "view">;

  changePrimaryWallet: TypedContractMethod<
    [newPrimary: AddressLike],
    [void],
    "nonpayable"
  >;

  emergencyUnlinkWallet: TypedContractMethod<
    [wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  getAllWalletsForAddress: TypedContractMethod<
    [wallet: AddressLike],
    [[string, string[]] & { primary: string; linked: string[] }],
    "view"
  >;

  getMyWallets: TypedContractMethod<
    [],
    [[string, string[]] & { primary: string; linked: string[] }],
    "view"
  >;

  getUserInfo: TypedContractMethod<
    [kycHash: BytesLike],
    [
      [boolean, string, bigint, bigint] & {
        exists: boolean;
        primaryWallet: string;
        linkedCount: bigint;
        registeredAt: bigint;
      }
    ],
    "view"
  >;

  getUserWallets: TypedContractMethod<
    [kycHash: BytesLike],
    [[string, string[]] & { primary: string; linked: string[] }],
    "view"
  >;

  isWalletRegistered: TypedContractMethod<
    [wallet: AddressLike],
    [boolean],
    "view"
  >;

  kycHashUsed: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  linkWallet: TypedContractMethod<[wallet: AddressLike], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  registerUser: TypedContractMethod<[kycHash: BytesLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalUsers: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlinkWallet: TypedContractMethod<
    [wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  users: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, boolean] & {
        kycHash: string;
        primaryWallet: string;
        registeredAt: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  walletToKycHash: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_LINKED_WALLETS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "changePrimaryWallet"
  ): TypedContractMethod<[newPrimary: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnlinkWallet"
  ): TypedContractMethod<[wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllWalletsForAddress"
  ): TypedContractMethod<
    [wallet: AddressLike],
    [[string, string[]] & { primary: string; linked: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyWallets"
  ): TypedContractMethod<
    [],
    [[string, string[]] & { primary: string; linked: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [kycHash: BytesLike],
    [
      [boolean, string, bigint, bigint] & {
        exists: boolean;
        primaryWallet: string;
        linkedCount: bigint;
        registeredAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserWallets"
  ): TypedContractMethod<
    [kycHash: BytesLike],
    [[string, string[]] & { primary: string; linked: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isWalletRegistered"
  ): TypedContractMethod<[wallet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "kycHashUsed"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "linkWallet"
  ): TypedContractMethod<[wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<[kycHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlinkWallet"
  ): TypedContractMethod<[wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, boolean] & {
        kycHash: string;
        primaryWallet: string;
        registeredAt: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "walletToKycHash"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PrimaryWalletChanged"
  ): TypedContractEvent<
    PrimaryWalletChangedEvent.InputTuple,
    PrimaryWalletChangedEvent.OutputTuple,
    PrimaryWalletChangedEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "WalletLinked"
  ): TypedContractEvent<
    WalletLinkedEvent.InputTuple,
    WalletLinkedEvent.OutputTuple,
    WalletLinkedEvent.OutputObject
  >;
  getEvent(
    key: "WalletUnlinked"
  ): TypedContractEvent<
    WalletUnlinkedEvent.InputTuple,
    WalletUnlinkedEvent.OutputTuple,
    WalletUnlinkedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PrimaryWalletChanged(bytes32,address,address)": TypedContractEvent<
      PrimaryWalletChangedEvent.InputTuple,
      PrimaryWalletChangedEvent.OutputTuple,
      PrimaryWalletChangedEvent.OutputObject
    >;
    PrimaryWalletChanged: TypedContractEvent<
      PrimaryWalletChangedEvent.InputTuple,
      PrimaryWalletChangedEvent.OutputTuple,
      PrimaryWalletChangedEvent.OutputObject
    >;

    "UserRegistered(bytes32,address,uint256)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;

    "WalletLinked(bytes32,address,uint256)": TypedContractEvent<
      WalletLinkedEvent.InputTuple,
      WalletLinkedEvent.OutputTuple,
      WalletLinkedEvent.OutputObject
    >;
    WalletLinked: TypedContractEvent<
      WalletLinkedEvent.InputTuple,
      WalletLinkedEvent.OutputTuple,
      WalletLinkedEvent.OutputObject
    >;

    "WalletUnlinked(bytes32,address,uint256)": TypedContractEvent<
      WalletUnlinkedEvent.InputTuple,
      WalletUnlinkedEvent.OutputTuple,
      WalletUnlinkedEvent.OutputObject
    >;
    WalletUnlinked: TypedContractEvent<
      WalletUnlinkedEvent.InputTuple,
      WalletUnlinkedEvent.OutputTuple,
      WalletUnlinkedEvent.OutputObject
    >;
  };
}
