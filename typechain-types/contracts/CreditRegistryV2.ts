/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CreditRegistryV2 {
  export type AttestationStruct = {
    attestationHash: BytesLike;
    subject: AddressLike;
    issuer: AddressLike;
    timestamp: BigNumberish;
    signature: BytesLike;
  };

  export type AttestationStructOutput = [
    attestationHash: string,
    subject: string,
    issuer: string,
    timestamp: bigint,
    signature: string
  ] & {
    attestationHash: string;
    subject: string;
    issuer: string;
    timestamp: bigint;
    signature: string;
  };

  export type LoanRecordStruct = {
    loanId: BigNumberish;
    borrower: AddressLike;
    principalUsd18: BigNumberish;
    repaidUsd18: BigNumberish;
    timestamp: BigNumberish;
    status: BigNumberish;
    lender: AddressLike;
  };

  export type LoanRecordStructOutput = [
    loanId: bigint,
    borrower: string,
    principalUsd18: bigint,
    repaidUsd18: bigint,
    timestamp: bigint,
    status: bigint,
    lender: string
  ] & {
    loanId: bigint;
    borrower: string;
    principalUsd18: bigint;
    repaidUsd18: bigint;
    timestamp: bigint;
    status: bigint;
    lender: string;
  };

  export type StakeInfoStruct = {
    amount: BigNumberish;
    lockUntil: BigNumberish;
  };

  export type StakeInfoStructOutput = [amount: bigint, lockUntil: bigint] & {
    amount: bigint;
    lockUntil: bigint;
  };
}

export interface CreditRegistryV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizedAttesters"
      | "authorizedLenders"
      | "depositStake"
      | "getActiveLoanCount"
      | "getAttestation"
      | "getFirstSeen"
      | "getLoan"
      | "getLoanIdsByBorrower"
      | "getLoansByBorrower"
      | "getStakeInfo"
      | "getWalletAge"
      | "getWalletBundle"
      | "linkWallets"
      | "owner"
      | "postAttestation"
      | "recordFirstSeen"
      | "registerLiquidation"
      | "registerLoan"
      | "registerRepayment"
      | "renounceOwnership"
      | "rescueERC20"
      | "rescueETH"
      | "setAuthorizedAttester"
      | "setAuthorizedLender"
      | "setFirstSeen"
      | "setStakingToken"
      | "stakes"
      | "stakingToken"
      | "transferOwnership"
      | "walletBundles"
      | "walletFirstSeen"
      | "withdrawStake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AttestationPosted"
      | "AttesterAuthorized"
      | "FirstSeenRecorded"
      | "LenderAuthorized"
      | "LiquidationRegistered"
      | "LoanRegistered"
      | "OwnershipTransferred"
      | "RepaymentRegistered"
      | "StakeDeposited"
      | "StakeWithdrawn"
      | "WalletsLinked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizedAttesters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedLenders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositStake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveLoanCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstSeen",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanIdsByBorrower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoansByBorrower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletAge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletBundle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkWallets",
    values: [AddressLike, AddressLike[], BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postAttestation",
    values: [BytesLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordFirstSeen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerLiquidation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerLoan",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRepayment",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueERC20",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueETH",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedAttester",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedLender",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFirstSeen",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "stakes", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "walletBundles",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "walletFirstSeen",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizedAttesters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedLenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveLoanCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstSeen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLoanIdsByBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoansByBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordFirstSeen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRepayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescueETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFirstSeen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletBundles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletFirstSeen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
}

export namespace AttestationPostedEvent {
  export type InputTuple = [
    attestationHash: BytesLike,
    subject: AddressLike,
    issuer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    attestationHash: string,
    subject: string,
    issuer: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    attestationHash: string;
    subject: string;
    issuer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AttesterAuthorizedEvent {
  export type InputTuple = [attester: AddressLike, allowed: boolean];
  export type OutputTuple = [attester: string, allowed: boolean];
  export interface OutputObject {
    attester: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FirstSeenRecordedEvent {
  export type InputTuple = [wallet: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [wallet: string, timestamp: bigint];
  export interface OutputObject {
    wallet: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LenderAuthorizedEvent {
  export type InputTuple = [lender: AddressLike, allowed: boolean];
  export type OutputTuple = [lender: string, allowed: boolean];
  export interface OutputObject {
    lender: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationRegisteredEvent {
  export type InputTuple = [
    borrower: AddressLike,
    loanId: BigNumberish,
    amountUsd18: BigNumberish,
    timestamp: BigNumberish,
    liquidator: AddressLike
  ];
  export type OutputTuple = [
    borrower: string,
    loanId: bigint,
    amountUsd18: bigint,
    timestamp: bigint,
    liquidator: string
  ];
  export interface OutputObject {
    borrower: string;
    loanId: bigint;
    amountUsd18: bigint;
    timestamp: bigint;
    liquidator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanRegisteredEvent {
  export type InputTuple = [
    borrower: AddressLike,
    loanId: BigNumberish,
    principalUsd18: BigNumberish,
    timestamp: BigNumberish,
    lender: AddressLike
  ];
  export type OutputTuple = [
    borrower: string,
    loanId: bigint,
    principalUsd18: bigint,
    timestamp: bigint,
    lender: string
  ];
  export interface OutputObject {
    borrower: string;
    loanId: bigint;
    principalUsd18: bigint;
    timestamp: bigint;
    lender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepaymentRegisteredEvent {
  export type InputTuple = [
    borrower: AddressLike,
    loanId: BigNumberish,
    amountUsd18: BigNumberish,
    timestamp: BigNumberish,
    payer: AddressLike
  ];
  export type OutputTuple = [
    borrower: string,
    loanId: bigint,
    amountUsd18: bigint,
    timestamp: bigint,
    payer: string
  ];
  export interface OutputObject {
    borrower: string;
    loanId: bigint;
    amountUsd18: bigint;
    timestamp: bigint;
    payer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeDepositedEvent {
  export type InputTuple = [
    staker: AddressLike,
    amount: BigNumberish,
    lockUntil: BigNumberish
  ];
  export type OutputTuple = [staker: string, amount: bigint, lockUntil: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
    lockUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeWithdrawnEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletsLinkedEvent {
  export type InputTuple = [
    owner: AddressLike,
    wallets: AddressLike[],
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    wallets: string[],
    timestamp: bigint
  ];
  export interface OutputObject {
    owner: string;
    wallets: string[];
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CreditRegistryV2 extends BaseContract {
  connect(runner?: ContractRunner | null): CreditRegistryV2;
  waitForDeployment(): Promise<this>;

  interface: CreditRegistryV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizedAttesters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  authorizedLenders: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  depositStake: TypedContractMethod<
    [amount: BigNumberish, lockSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveLoanCount: TypedContractMethod<
    [borrower: AddressLike],
    [bigint],
    "view"
  >;

  getAttestation: TypedContractMethod<
    [attestationHash: BytesLike],
    [CreditRegistryV2.AttestationStructOutput],
    "view"
  >;

  getFirstSeen: TypedContractMethod<[wallet: AddressLike], [bigint], "view">;

  getLoan: TypedContractMethod<
    [loanId: BigNumberish],
    [CreditRegistryV2.LoanRecordStructOutput],
    "view"
  >;

  getLoanIdsByBorrower: TypedContractMethod<
    [borrower: AddressLike],
    [bigint[]],
    "view"
  >;

  getLoansByBorrower: TypedContractMethod<
    [borrower: AddressLike],
    [CreditRegistryV2.LoanRecordStructOutput[]],
    "view"
  >;

  getStakeInfo: TypedContractMethod<
    [staker: AddressLike],
    [CreditRegistryV2.StakeInfoStructOutput],
    "view"
  >;

  getWalletAge: TypedContractMethod<[wallet: AddressLike], [bigint], "view">;

  getWalletBundle: TypedContractMethod<
    [owner: AddressLike],
    [string[]],
    "view"
  >;

  linkWallets: TypedContractMethod<
    [
      owner: AddressLike,
      wallets: AddressLike[],
      signatures: BytesLike[],
      nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  postAttestation: TypedContractMethod<
    [
      attestationHash: BytesLike,
      subject: AddressLike,
      timestamp: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  recordFirstSeen: TypedContractMethod<[], [void], "nonpayable">;

  registerLiquidation: TypedContractMethod<
    [loanId: BigNumberish, recoveredUsd18: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerLoan: TypedContractMethod<
    [borrower: AddressLike, principalUsd18: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  registerRepayment: TypedContractMethod<
    [loanId: BigNumberish, amountUsd18: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rescueERC20: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  rescueETH: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAuthorizedAttester: TypedContractMethod<
    [attester: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  setAuthorizedLender: TypedContractMethod<
    [lender: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  setFirstSeen: TypedContractMethod<
    [wallet: AddressLike, timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStakingToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  stakes: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { amount: bigint; lockUntil: bigint }],
    "view"
  >;

  stakingToken: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  walletBundles: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  walletFirstSeen: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawStake: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizedAttesters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedLenders"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "depositStake"
  ): TypedContractMethod<
    [amount: BigNumberish, lockSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveLoanCount"
  ): TypedContractMethod<[borrower: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAttestation"
  ): TypedContractMethod<
    [attestationHash: BytesLike],
    [CreditRegistryV2.AttestationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFirstSeen"
  ): TypedContractMethod<[wallet: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLoan"
  ): TypedContractMethod<
    [loanId: BigNumberish],
    [CreditRegistryV2.LoanRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLoanIdsByBorrower"
  ): TypedContractMethod<[borrower: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getLoansByBorrower"
  ): TypedContractMethod<
    [borrower: AddressLike],
    [CreditRegistryV2.LoanRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakeInfo"
  ): TypedContractMethod<
    [staker: AddressLike],
    [CreditRegistryV2.StakeInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWalletAge"
  ): TypedContractMethod<[wallet: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWalletBundle"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "linkWallets"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      wallets: AddressLike[],
      signatures: BytesLike[],
      nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "postAttestation"
  ): TypedContractMethod<
    [
      attestationHash: BytesLike,
      subject: AddressLike,
      timestamp: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordFirstSeen"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerLiquidation"
  ): TypedContractMethod<
    [loanId: BigNumberish, recoveredUsd18: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerLoan"
  ): TypedContractMethod<
    [borrower: AddressLike, principalUsd18: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerRepayment"
  ): TypedContractMethod<
    [loanId: BigNumberish, amountUsd18: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rescueERC20"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rescueETH"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedAttester"
  ): TypedContractMethod<
    [attester: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedLender"
  ): TypedContractMethod<
    [lender: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFirstSeen"
  ): TypedContractMethod<
    [wallet: AddressLike, timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStakingToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakes"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { amount: bigint; lockUntil: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "walletBundles"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "walletFirstSeen"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawStake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AttestationPosted"
  ): TypedContractEvent<
    AttestationPostedEvent.InputTuple,
    AttestationPostedEvent.OutputTuple,
    AttestationPostedEvent.OutputObject
  >;
  getEvent(
    key: "AttesterAuthorized"
  ): TypedContractEvent<
    AttesterAuthorizedEvent.InputTuple,
    AttesterAuthorizedEvent.OutputTuple,
    AttesterAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "FirstSeenRecorded"
  ): TypedContractEvent<
    FirstSeenRecordedEvent.InputTuple,
    FirstSeenRecordedEvent.OutputTuple,
    FirstSeenRecordedEvent.OutputObject
  >;
  getEvent(
    key: "LenderAuthorized"
  ): TypedContractEvent<
    LenderAuthorizedEvent.InputTuple,
    LenderAuthorizedEvent.OutputTuple,
    LenderAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationRegistered"
  ): TypedContractEvent<
    LiquidationRegisteredEvent.InputTuple,
    LiquidationRegisteredEvent.OutputTuple,
    LiquidationRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "LoanRegistered"
  ): TypedContractEvent<
    LoanRegisteredEvent.InputTuple,
    LoanRegisteredEvent.OutputTuple,
    LoanRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RepaymentRegistered"
  ): TypedContractEvent<
    RepaymentRegisteredEvent.InputTuple,
    RepaymentRegisteredEvent.OutputTuple,
    RepaymentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "StakeDeposited"
  ): TypedContractEvent<
    StakeDepositedEvent.InputTuple,
    StakeDepositedEvent.OutputTuple,
    StakeDepositedEvent.OutputObject
  >;
  getEvent(
    key: "StakeWithdrawn"
  ): TypedContractEvent<
    StakeWithdrawnEvent.InputTuple,
    StakeWithdrawnEvent.OutputTuple,
    StakeWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "WalletsLinked"
  ): TypedContractEvent<
    WalletsLinkedEvent.InputTuple,
    WalletsLinkedEvent.OutputTuple,
    WalletsLinkedEvent.OutputObject
  >;

  filters: {
    "AttestationPosted(bytes32,address,address,uint256)": TypedContractEvent<
      AttestationPostedEvent.InputTuple,
      AttestationPostedEvent.OutputTuple,
      AttestationPostedEvent.OutputObject
    >;
    AttestationPosted: TypedContractEvent<
      AttestationPostedEvent.InputTuple,
      AttestationPostedEvent.OutputTuple,
      AttestationPostedEvent.OutputObject
    >;

    "AttesterAuthorized(address,bool)": TypedContractEvent<
      AttesterAuthorizedEvent.InputTuple,
      AttesterAuthorizedEvent.OutputTuple,
      AttesterAuthorizedEvent.OutputObject
    >;
    AttesterAuthorized: TypedContractEvent<
      AttesterAuthorizedEvent.InputTuple,
      AttesterAuthorizedEvent.OutputTuple,
      AttesterAuthorizedEvent.OutputObject
    >;

    "FirstSeenRecorded(address,uint256)": TypedContractEvent<
      FirstSeenRecordedEvent.InputTuple,
      FirstSeenRecordedEvent.OutputTuple,
      FirstSeenRecordedEvent.OutputObject
    >;
    FirstSeenRecorded: TypedContractEvent<
      FirstSeenRecordedEvent.InputTuple,
      FirstSeenRecordedEvent.OutputTuple,
      FirstSeenRecordedEvent.OutputObject
    >;

    "LenderAuthorized(address,bool)": TypedContractEvent<
      LenderAuthorizedEvent.InputTuple,
      LenderAuthorizedEvent.OutputTuple,
      LenderAuthorizedEvent.OutputObject
    >;
    LenderAuthorized: TypedContractEvent<
      LenderAuthorizedEvent.InputTuple,
      LenderAuthorizedEvent.OutputTuple,
      LenderAuthorizedEvent.OutputObject
    >;

    "LiquidationRegistered(address,uint256,uint256,uint256,address)": TypedContractEvent<
      LiquidationRegisteredEvent.InputTuple,
      LiquidationRegisteredEvent.OutputTuple,
      LiquidationRegisteredEvent.OutputObject
    >;
    LiquidationRegistered: TypedContractEvent<
      LiquidationRegisteredEvent.InputTuple,
      LiquidationRegisteredEvent.OutputTuple,
      LiquidationRegisteredEvent.OutputObject
    >;

    "LoanRegistered(address,uint256,uint256,uint256,address)": TypedContractEvent<
      LoanRegisteredEvent.InputTuple,
      LoanRegisteredEvent.OutputTuple,
      LoanRegisteredEvent.OutputObject
    >;
    LoanRegistered: TypedContractEvent<
      LoanRegisteredEvent.InputTuple,
      LoanRegisteredEvent.OutputTuple,
      LoanRegisteredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RepaymentRegistered(address,uint256,uint256,uint256,address)": TypedContractEvent<
      RepaymentRegisteredEvent.InputTuple,
      RepaymentRegisteredEvent.OutputTuple,
      RepaymentRegisteredEvent.OutputObject
    >;
    RepaymentRegistered: TypedContractEvent<
      RepaymentRegisteredEvent.InputTuple,
      RepaymentRegisteredEvent.OutputTuple,
      RepaymentRegisteredEvent.OutputObject
    >;

    "StakeDeposited(address,uint256,uint256)": TypedContractEvent<
      StakeDepositedEvent.InputTuple,
      StakeDepositedEvent.OutputTuple,
      StakeDepositedEvent.OutputObject
    >;
    StakeDeposited: TypedContractEvent<
      StakeDepositedEvent.InputTuple,
      StakeDepositedEvent.OutputTuple,
      StakeDepositedEvent.OutputObject
    >;

    "StakeWithdrawn(address,uint256)": TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;
    StakeWithdrawn: TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;

    "WalletsLinked(address,address[],uint256)": TypedContractEvent<
      WalletsLinkedEvent.InputTuple,
      WalletsLinkedEvent.OutputTuple,
      WalletsLinkedEvent.OutputObject
    >;
    WalletsLinked: TypedContractEvent<
      WalletsLinkedEvent.InputTuple,
      WalletsLinkedEvent.OutputTuple,
      WalletsLinkedEvent.OutputObject
    >;
  };
}
