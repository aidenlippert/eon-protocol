/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ReputationScorer {
  export type PaymentRecordStruct = {
    loanId: BigNumberish;
    amount: BigNumberish;
    dueDate: BigNumberish;
    paidDate: BigNumberish;
    onTime: boolean;
    lateDays: BigNumberish;
  };

  export type PaymentRecordStructOutput = [
    loanId: bigint,
    amount: bigint,
    dueDate: bigint,
    paidDate: bigint,
    onTime: boolean,
    lateDays: bigint
  ] & {
    loanId: bigint;
    amount: bigint;
    dueDate: bigint;
    paidDate: bigint;
    onTime: boolean;
    lateDays: bigint;
  };

  export type CreditScoreStruct = {
    baseScore: BigNumberish;
    paymentScore: BigNumberish;
    walletAgeScore: BigNumberish;
    protocolScore: BigNumberish;
    totalScore: BigNumberish;
    tier: string;
    ltv: BigNumberish;
    lastUpdated: BigNumberish;
  };

  export type CreditScoreStructOutput = [
    baseScore: bigint,
    paymentScore: bigint,
    walletAgeScore: bigint,
    protocolScore: bigint,
    totalScore: bigint,
    tier: string,
    ltv: bigint,
    lastUpdated: bigint
  ] & {
    baseScore: bigint;
    paymentScore: bigint;
    walletAgeScore: bigint;
    protocolScore: bigint;
    totalScore: bigint;
    tier: string;
    ltv: bigint;
    lastUpdated: bigint;
  };
}

export interface ReputationScorerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_WEIGHT"
      | "PAYMENT_WEIGHT"
      | "PROTOCOL_WEIGHT"
      | "WALLET_AGE_WEIGHT"
      | "authorizedUpdaters"
      | "calculateScore"
      | "getCreditTier"
      | "getDynamicLTV"
      | "getPaymentHistory"
      | "getScoreBreakdown"
      | "incrementProtocolInteractions"
      | "owner"
      | "paymentHistory"
      | "protocolInteractions"
      | "recordPayment"
      | "recordWalletCreation"
      | "renounceOwnership"
      | "scores"
      | "setAuthorizedUpdater"
      | "transferOwnership"
      | "walletCreationTime"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedUpdaterSet"
      | "OwnershipTransferred"
      | "PaymentRecorded"
      | "ScoreUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASE_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WALLET_AGE_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedUpdaters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateScore",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditTier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDynamicLTV",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getScoreBreakdown",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementProtocolInteractions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentHistory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolInteractions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordPayment",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "recordWalletCreation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "scores", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedUpdater",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "walletCreationTime",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WALLET_AGE_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedUpdaters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDynamicLTV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScoreBreakdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementProtocolInteractions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolInteractions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordWalletCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scores", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletCreationTime",
    data: BytesLike
  ): Result;
}

export namespace AuthorizedUpdaterSetEvent {
  export type InputTuple = [updater: AddressLike, authorized: boolean];
  export type OutputTuple = [updater: string, authorized: boolean];
  export interface OutputObject {
    updater: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentRecordedEvent {
  export type InputTuple = [
    borrower: AddressLike,
    loanId: BigNumberish,
    onTime: boolean,
    lateDays: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    loanId: bigint,
    onTime: boolean,
    lateDays: bigint
  ];
  export interface OutputObject {
    borrower: string;
    loanId: bigint;
    onTime: boolean;
    lateDays: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoreUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    totalScore: BigNumberish,
    baseScore: BigNumberish,
    paymentScore: BigNumberish,
    walletAgeScore: BigNumberish,
    protocolScore: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    totalScore: bigint,
    baseScore: bigint,
    paymentScore: bigint,
    walletAgeScore: bigint,
    protocolScore: bigint
  ];
  export interface OutputObject {
    user: string;
    totalScore: bigint;
    baseScore: bigint;
    paymentScore: bigint;
    walletAgeScore: bigint;
    protocolScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReputationScorer extends BaseContract {
  connect(runner?: ContractRunner | null): ReputationScorer;
  waitForDeployment(): Promise<this>;

  interface: ReputationScorerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_WEIGHT: TypedContractMethod<[], [bigint], "view">;

  PAYMENT_WEIGHT: TypedContractMethod<[], [bigint], "view">;

  PROTOCOL_WEIGHT: TypedContractMethod<[], [bigint], "view">;

  WALLET_AGE_WEIGHT: TypedContractMethod<[], [bigint], "view">;

  authorizedUpdaters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  calculateScore: TypedContractMethod<
    [user: AddressLike, baseScore: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getCreditTier: TypedContractMethod<[user: AddressLike], [string], "view">;

  getDynamicLTV: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getPaymentHistory: TypedContractMethod<
    [user: AddressLike],
    [ReputationScorer.PaymentRecordStructOutput[]],
    "view"
  >;

  getScoreBreakdown: TypedContractMethod<
    [user: AddressLike],
    [ReputationScorer.CreditScoreStructOutput],
    "view"
  >;

  incrementProtocolInteractions: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paymentHistory: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        loanId: bigint;
        amount: bigint;
        dueDate: bigint;
        paidDate: bigint;
        onTime: boolean;
        lateDays: bigint;
      }
    ],
    "view"
  >;

  protocolInteractions: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  recordPayment: TypedContractMethod<
    [
      borrower: AddressLike,
      loanId: BigNumberish,
      amount: BigNumberish,
      dueDate: BigNumberish,
      onTime: boolean
    ],
    [void],
    "nonpayable"
  >;

  recordWalletCreation: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  scores: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, string, bigint, bigint] & {
        baseScore: bigint;
        paymentScore: bigint;
        walletAgeScore: bigint;
        protocolScore: bigint;
        totalScore: bigint;
        tier: string;
        ltv: bigint;
        lastUpdated: bigint;
      }
    ],
    "view"
  >;

  setAuthorizedUpdater: TypedContractMethod<
    [updater: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  walletCreationTime: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_WEIGHT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PAYMENT_WEIGHT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PROTOCOL_WEIGHT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WALLET_AGE_WEIGHT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "authorizedUpdaters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "calculateScore"
  ): TypedContractMethod<
    [user: AddressLike, baseScore: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCreditTier"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getDynamicLTV"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPaymentHistory"
  ): TypedContractMethod<
    [user: AddressLike],
    [ReputationScorer.PaymentRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getScoreBreakdown"
  ): TypedContractMethod<
    [user: AddressLike],
    [ReputationScorer.CreditScoreStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "incrementProtocolInteractions"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentHistory"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        loanId: bigint;
        amount: bigint;
        dueDate: bigint;
        paidDate: bigint;
        onTime: boolean;
        lateDays: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolInteractions"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordPayment"
  ): TypedContractMethod<
    [
      borrower: AddressLike,
      loanId: BigNumberish,
      amount: BigNumberish,
      dueDate: BigNumberish,
      onTime: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordWalletCreation"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "scores"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, string, bigint, bigint] & {
        baseScore: bigint;
        paymentScore: bigint;
        walletAgeScore: bigint;
        protocolScore: bigint;
        totalScore: bigint;
        tier: string;
        ltv: bigint;
        lastUpdated: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedUpdater"
  ): TypedContractMethod<
    [updater: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "walletCreationTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "AuthorizedUpdaterSet"
  ): TypedContractEvent<
    AuthorizedUpdaterSetEvent.InputTuple,
    AuthorizedUpdaterSetEvent.OutputTuple,
    AuthorizedUpdaterSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentRecorded"
  ): TypedContractEvent<
    PaymentRecordedEvent.InputTuple,
    PaymentRecordedEvent.OutputTuple,
    PaymentRecordedEvent.OutputObject
  >;
  getEvent(
    key: "ScoreUpdated"
  ): TypedContractEvent<
    ScoreUpdatedEvent.InputTuple,
    ScoreUpdatedEvent.OutputTuple,
    ScoreUpdatedEvent.OutputObject
  >;

  filters: {
    "AuthorizedUpdaterSet(address,bool)": TypedContractEvent<
      AuthorizedUpdaterSetEvent.InputTuple,
      AuthorizedUpdaterSetEvent.OutputTuple,
      AuthorizedUpdaterSetEvent.OutputObject
    >;
    AuthorizedUpdaterSet: TypedContractEvent<
      AuthorizedUpdaterSetEvent.InputTuple,
      AuthorizedUpdaterSetEvent.OutputTuple,
      AuthorizedUpdaterSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentRecorded(address,uint256,bool,uint8)": TypedContractEvent<
      PaymentRecordedEvent.InputTuple,
      PaymentRecordedEvent.OutputTuple,
      PaymentRecordedEvent.OutputObject
    >;
    PaymentRecorded: TypedContractEvent<
      PaymentRecordedEvent.InputTuple,
      PaymentRecordedEvent.OutputTuple,
      PaymentRecordedEvent.OutputObject
    >;

    "ScoreUpdated(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ScoreUpdatedEvent.InputTuple,
      ScoreUpdatedEvent.OutputTuple,
      ScoreUpdatedEvent.OutputObject
    >;
    ScoreUpdated: TypedContractEvent<
      ScoreUpdatedEvent.InputTuple,
      ScoreUpdatedEvent.OutputTuple,
      ScoreUpdatedEvent.OutputObject
    >;
  };
}
