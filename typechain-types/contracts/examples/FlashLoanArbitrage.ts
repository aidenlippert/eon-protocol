/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FlashLoanArbitrageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FLASH_LOAN_VAULT"
      | "calculatePotentialProfit"
      | "emergencyWithdraw"
      | "executeArbitrage"
      | "executeOperation"
      | "failedTrades"
      | "getStats"
      | "owner"
      | "renounceOwnership"
      | "successfulTrades"
      | "totalProfits"
      | "transferOwnership"
      | "withdrawProfits"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ArbitrageExecuted"
      | "ArbitrageFailed"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FLASH_LOAN_VAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePotentialProfit",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeArbitrage",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOperation",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "failedTrades",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getStats", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "successfulTrades",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalProfits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProfits",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "FLASH_LOAN_VAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePotentialProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeArbitrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "successfulTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalProfits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProfits",
    data: BytesLike
  ): Result;
}

export namespace ArbitrageExecutedEvent {
  export type InputTuple = [
    asset: AddressLike,
    amount: BigNumberish,
    profit: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    amount: bigint,
    profit: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    asset: string;
    amount: bigint;
    profit: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArbitrageFailedEvent {
  export type InputTuple = [reason: string];
  export type OutputTuple = [reason: string];
  export interface OutputObject {
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FlashLoanArbitrage extends BaseContract {
  connect(runner?: ContractRunner | null): FlashLoanArbitrage;
  waitForDeployment(): Promise<this>;

  interface: FlashLoanArbitrageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FLASH_LOAN_VAULT: TypedContractMethod<[], [string], "view">;

  calculatePotentialProfit: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      dexA: AddressLike,
      dexB: AddressLike
    ],
    [[bigint, boolean] & { potentialProfit: bigint; isProfitable: boolean }],
    "view"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  executeArbitrage: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      dexA: AddressLike,
      dexB: AddressLike,
      minProfit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  executeOperation: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      premium: BigNumberish,
      initiator: AddressLike,
      params: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  failedTrades: TypedContractMethod<[], [bigint], "view">;

  getStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        profits: bigint;
        successful: bigint;
        failed: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  successfulTrades: TypedContractMethod<[], [bigint], "view">;

  totalProfits: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawProfits: TypedContractMethod<
    [asset: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FLASH_LOAN_VAULT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculatePotentialProfit"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      dexA: AddressLike,
      dexB: AddressLike
    ],
    [[bigint, boolean] & { potentialProfit: bigint; isProfitable: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeArbitrage"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      dexA: AddressLike,
      dexB: AddressLike,
      minProfit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeOperation"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      premium: BigNumberish,
      initiator: AddressLike,
      params: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "failedTrades"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        profits: bigint;
        successful: bigint;
        failed: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "successfulTrades"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalProfits"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawProfits"
  ): TypedContractMethod<[asset: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ArbitrageExecuted"
  ): TypedContractEvent<
    ArbitrageExecutedEvent.InputTuple,
    ArbitrageExecutedEvent.OutputTuple,
    ArbitrageExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ArbitrageFailed"
  ): TypedContractEvent<
    ArbitrageFailedEvent.InputTuple,
    ArbitrageFailedEvent.OutputTuple,
    ArbitrageFailedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ArbitrageExecuted(address,uint256,uint256,uint256)": TypedContractEvent<
      ArbitrageExecutedEvent.InputTuple,
      ArbitrageExecutedEvent.OutputTuple,
      ArbitrageExecutedEvent.OutputObject
    >;
    ArbitrageExecuted: TypedContractEvent<
      ArbitrageExecutedEvent.InputTuple,
      ArbitrageExecutedEvent.OutputTuple,
      ArbitrageExecutedEvent.OutputObject
    >;

    "ArbitrageFailed(string)": TypedContractEvent<
      ArbitrageFailedEvent.InputTuple,
      ArbitrageFailedEvent.OutputTuple,
      ArbitrageFailedEvent.OutputObject
    >;
    ArbitrageFailed: TypedContractEvent<
      ArbitrageFailedEvent.InputTuple,
      ArbitrageFailedEvent.OutputTuple,
      ArbitrageFailedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
