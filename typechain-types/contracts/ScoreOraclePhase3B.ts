/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ScoreOraclePhase3B {
  export type ScoreBreakdownStruct = {
    overall: BigNumberish;
    s1_repayment: BigNumberish;
    s2_collateral: BigNumberish;
    s3_sybil: BigNumberish;
    s4_crossChain: BigNumberish;
    s5_governance: BigNumberish;
    s3_raw: BigNumberish;
  };

  export type ScoreBreakdownStructOutput = [
    overall: bigint,
    s1_repayment: bigint,
    s2_collateral: bigint,
    s3_sybil: bigint,
    s4_crossChain: bigint,
    s5_governance: bigint,
    s3_raw: bigint
  ] & {
    overall: bigint;
    s1_repayment: bigint;
    s2_collateral: bigint;
    s3_sybil: bigint;
    s4_crossChain: bigint;
    s5_governance: bigint;
    s3_raw: bigint;
  };
}

export interface ScoreOraclePhase3BInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "TIER_GOLD"
      | "TIER_PLATINUM"
      | "TIER_SILVER"
      | "addChainSelector"
      | "computeScore"
      | "getAPR"
      | "getScoreTier"
      | "getSupportedChainSelectors"
      | "isSupportedChain"
      | "owner"
      | "registry"
      | "removeChainSelector"
      | "renounceOwnership"
      | "supportedChainSelectors"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChainSelectorAdded"
      | "ChainSelectorRemoved"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "TIER_GOLD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TIER_PLATINUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_SILVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addChainSelector",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAPR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getScoreTier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedChainSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeChainSelector",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedChainSelectors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "TIER_GOLD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TIER_PLATINUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_SILVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addChainSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAPR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getScoreTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedChainSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeChainSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedChainSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ChainSelectorAddedEvent {
  export type InputTuple = [chainSelector: BigNumberish];
  export type OutputTuple = [chainSelector: bigint];
  export interface OutputObject {
    chainSelector: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChainSelectorRemovedEvent {
  export type InputTuple = [chainSelector: BigNumberish];
  export type OutputTuple = [chainSelector: bigint];
  export interface OutputObject {
    chainSelector: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ScoreOraclePhase3B extends BaseContract {
  connect(runner?: ContractRunner | null): ScoreOraclePhase3B;
  waitForDeployment(): Promise<this>;

  interface: ScoreOraclePhase3BInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  TIER_GOLD: TypedContractMethod<[], [bigint], "view">;

  TIER_PLATINUM: TypedContractMethod<[], [bigint], "view">;

  TIER_SILVER: TypedContractMethod<[], [bigint], "view">;

  addChainSelector: TypedContractMethod<
    [chainSelector: BigNumberish],
    [void],
    "nonpayable"
  >;

  computeScore: TypedContractMethod<
    [subject: AddressLike],
    [ScoreOraclePhase3B.ScoreBreakdownStructOutput],
    "view"
  >;

  getAPR: TypedContractMethod<[overall: BigNumberish], [bigint], "view">;

  getScoreTier: TypedContractMethod<[overall: BigNumberish], [bigint], "view">;

  getSupportedChainSelectors: TypedContractMethod<[], [bigint[]], "view">;

  isSupportedChain: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  removeChainSelector: TypedContractMethod<
    [chainSelector: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  supportedChainSelectors: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "TIER_GOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TIER_PLATINUM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TIER_SILVER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addChainSelector"
  ): TypedContractMethod<[chainSelector: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "computeScore"
  ): TypedContractMethod<
    [subject: AddressLike],
    [ScoreOraclePhase3B.ScoreBreakdownStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAPR"
  ): TypedContractMethod<[overall: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getScoreTier"
  ): TypedContractMethod<[overall: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSupportedChainSelectors"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isSupportedChain"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeChainSelector"
  ): TypedContractMethod<[chainSelector: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportedChainSelectors"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ChainSelectorAdded"
  ): TypedContractEvent<
    ChainSelectorAddedEvent.InputTuple,
    ChainSelectorAddedEvent.OutputTuple,
    ChainSelectorAddedEvent.OutputObject
  >;
  getEvent(
    key: "ChainSelectorRemoved"
  ): TypedContractEvent<
    ChainSelectorRemovedEvent.InputTuple,
    ChainSelectorRemovedEvent.OutputTuple,
    ChainSelectorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ChainSelectorAdded(uint64)": TypedContractEvent<
      ChainSelectorAddedEvent.InputTuple,
      ChainSelectorAddedEvent.OutputTuple,
      ChainSelectorAddedEvent.OutputObject
    >;
    ChainSelectorAdded: TypedContractEvent<
      ChainSelectorAddedEvent.InputTuple,
      ChainSelectorAddedEvent.OutputTuple,
      ChainSelectorAddedEvent.OutputObject
    >;

    "ChainSelectorRemoved(uint64)": TypedContractEvent<
      ChainSelectorRemovedEvent.InputTuple,
      ChainSelectorRemovedEvent.OutputTuple,
      ChainSelectorRemovedEvent.OutputObject
    >;
    ChainSelectorRemoved: TypedContractEvent<
      ChainSelectorRemovedEvent.InputTuple,
      ChainSelectorRemovedEvent.OutputTuple,
      ChainSelectorRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
