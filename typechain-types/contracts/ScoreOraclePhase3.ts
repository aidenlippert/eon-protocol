/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ScoreOraclePhase3 {
  export type ScoreBreakdownStruct = {
    s1_repayment: BigNumberish;
    s2_collateral: BigNumberish;
    s3_sybil: BigNumberish;
    s4_crosschain: BigNumberish;
    s5_participation: BigNumberish;
    overall: BigNumberish;
  };

  export type ScoreBreakdownStructOutput = [
    s1_repayment: bigint,
    s2_collateral: bigint,
    s3_sybil: bigint,
    s4_crosschain: bigint,
    s5_participation: bigint,
    overall: bigint
  ] & {
    s1_repayment: bigint;
    s2_collateral: bigint;
    s3_sybil: bigint;
    s4_crosschain: bigint;
    s5_participation: bigint;
    overall: bigint;
  };
}

export interface ScoreOraclePhase3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_SCORE"
      | "MIN_SCORE"
      | "WEIGHT_COLLATERAL"
      | "WEIGHT_CROSSCHAIN"
      | "WEIGHT_PARTICIPATION"
      | "WEIGHT_REPAYMENT"
      | "WEIGHT_SYBIL"
      | "baseAPR"
      | "computeScore"
      | "getAPR"
      | "getScoreTier"
      | "hasRecentActivity"
      | "maxAPR"
      | "minAPR"
      | "owner"
      | "registry"
      | "renounceOwnership"
      | "setAPRConfig"
      | "setRegistry"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "APRConfigUpdated"
      | "OwnershipTransferred"
      | "ScoreComputed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_SCORE", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_SCORE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WEIGHT_COLLATERAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WEIGHT_CROSSCHAIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WEIGHT_PARTICIPATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WEIGHT_REPAYMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WEIGHT_SYBIL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseAPR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "computeScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAPR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getScoreTier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRecentActivity",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxAPR", values?: undefined): string;
  encodeFunctionData(functionFragment: "minAPR", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAPRConfig",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_SCORE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_SCORE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WEIGHT_COLLATERAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WEIGHT_CROSSCHAIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WEIGHT_PARTICIPATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WEIGHT_REPAYMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WEIGHT_SYBIL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseAPR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAPR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getScoreTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasRecentActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxAPR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minAPR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAPRConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace APRConfigUpdatedEvent {
  export type InputTuple = [
    baseAPR: BigNumberish,
    minAPR: BigNumberish,
    maxAPR: BigNumberish
  ];
  export type OutputTuple = [baseAPR: bigint, minAPR: bigint, maxAPR: bigint];
  export interface OutputObject {
    baseAPR: bigint;
    minAPR: bigint;
    maxAPR: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoreComputedEvent {
  export type InputTuple = [
    subject: AddressLike,
    s1: BigNumberish,
    s2: BigNumberish,
    s3: BigNumberish,
    s4: BigNumberish,
    s5: BigNumberish,
    overall: BigNumberish
  ];
  export type OutputTuple = [
    subject: string,
    s1: bigint,
    s2: bigint,
    s3: bigint,
    s4: bigint,
    s5: bigint,
    overall: bigint
  ];
  export interface OutputObject {
    subject: string;
    s1: bigint;
    s2: bigint;
    s3: bigint;
    s4: bigint;
    s5: bigint;
    overall: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ScoreOraclePhase3 extends BaseContract {
  connect(runner?: ContractRunner | null): ScoreOraclePhase3;
  waitForDeployment(): Promise<this>;

  interface: ScoreOraclePhase3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_SCORE: TypedContractMethod<[], [bigint], "view">;

  MIN_SCORE: TypedContractMethod<[], [bigint], "view">;

  WEIGHT_COLLATERAL: TypedContractMethod<[], [bigint], "view">;

  WEIGHT_CROSSCHAIN: TypedContractMethod<[], [bigint], "view">;

  WEIGHT_PARTICIPATION: TypedContractMethod<[], [bigint], "view">;

  WEIGHT_REPAYMENT: TypedContractMethod<[], [bigint], "view">;

  WEIGHT_SYBIL: TypedContractMethod<[], [bigint], "view">;

  baseAPR: TypedContractMethod<[], [bigint], "view">;

  computeScore: TypedContractMethod<
    [subject: AddressLike],
    [ScoreOraclePhase3.ScoreBreakdownStructOutput],
    "view"
  >;

  getAPR: TypedContractMethod<[overall: BigNumberish], [bigint], "view">;

  getScoreTier: TypedContractMethod<[overall: BigNumberish], [string], "view">;

  hasRecentActivity: TypedContractMethod<
    [subject: AddressLike, maxAge: BigNumberish],
    [boolean],
    "view"
  >;

  maxAPR: TypedContractMethod<[], [bigint], "view">;

  minAPR: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAPRConfig: TypedContractMethod<
    [_baseAPR: BigNumberish, _minAPR: BigNumberish, _maxAPR: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRegistry: TypedContractMethod<
    [_registry: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEIGHT_COLLATERAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEIGHT_CROSSCHAIN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEIGHT_PARTICIPATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEIGHT_REPAYMENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEIGHT_SYBIL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseAPR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "computeScore"
  ): TypedContractMethod<
    [subject: AddressLike],
    [ScoreOraclePhase3.ScoreBreakdownStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAPR"
  ): TypedContractMethod<[overall: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getScoreTier"
  ): TypedContractMethod<[overall: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "hasRecentActivity"
  ): TypedContractMethod<
    [subject: AddressLike, maxAge: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxAPR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minAPR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAPRConfig"
  ): TypedContractMethod<
    [_baseAPR: BigNumberish, _minAPR: BigNumberish, _maxAPR: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRegistry"
  ): TypedContractMethod<[_registry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "APRConfigUpdated"
  ): TypedContractEvent<
    APRConfigUpdatedEvent.InputTuple,
    APRConfigUpdatedEvent.OutputTuple,
    APRConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ScoreComputed"
  ): TypedContractEvent<
    ScoreComputedEvent.InputTuple,
    ScoreComputedEvent.OutputTuple,
    ScoreComputedEvent.OutputObject
  >;

  filters: {
    "APRConfigUpdated(uint16,uint16,uint16)": TypedContractEvent<
      APRConfigUpdatedEvent.InputTuple,
      APRConfigUpdatedEvent.OutputTuple,
      APRConfigUpdatedEvent.OutputObject
    >;
    APRConfigUpdated: TypedContractEvent<
      APRConfigUpdatedEvent.InputTuple,
      APRConfigUpdatedEvent.OutputTuple,
      APRConfigUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ScoreComputed(address,uint8,uint8,int16,uint8,uint8,uint16)": TypedContractEvent<
      ScoreComputedEvent.InputTuple,
      ScoreComputedEvent.OutputTuple,
      ScoreComputedEvent.OutputObject
    >;
    ScoreComputed: TypedContractEvent<
      ScoreComputedEvent.InputTuple,
      ScoreComputedEvent.OutputTuple,
      ScoreComputedEvent.OutputObject
    >;
  };
}
