/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ScoreAttestorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "attestScore"
      | "attestationHistory"
      | "creditScoreSchema"
      | "decodeAttestation"
      | "eas"
      | "getAttestationHistory"
      | "getLatestAttestation"
      | "initialize"
      | "latestAttestation"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "scoreOracle"
      | "transferOwnership"
      | "updateOracle"
      | "updateSchema"
      | "upgradeToAndCall"
      | "verifyAttestation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AttestationCreated"
      | "Initialized"
      | "OracleUpdated"
      | "OwnershipTransferred"
      | "SchemaUpdated"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attestScore",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "attestationHistory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditScoreSchema",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decodeAttestation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "eas", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAttestationHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestAttestation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestAttestation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scoreOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSchema",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAttestation",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestationHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditScoreSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAttestationHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scoreOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAttestation",
    data: BytesLike
  ): Result;
}

export namespace AttestationCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    uid: BytesLike,
    score: BigNumberish,
    tier: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    uid: string,
    score: bigint,
    tier: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    uid: string;
    score: bigint;
    tier: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleUpdatedEvent {
  export type InputTuple = [oldOracle: AddressLike, newOracle: AddressLike];
  export type OutputTuple = [oldOracle: string, newOracle: string];
  export interface OutputObject {
    oldOracle: string;
    newOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SchemaUpdatedEvent {
  export type InputTuple = [oldSchema: BytesLike, newSchema: BytesLike];
  export type OutputTuple = [oldSchema: string, newSchema: string];
  export interface OutputObject {
    oldSchema: string;
    newSchema: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ScoreAttestor extends BaseContract {
  connect(runner?: ContractRunner | null): ScoreAttestor;
  waitForDeployment(): Promise<this>;

  interface: ScoreAttestorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  attestScore: TypedContractMethod<
    [user: AddressLike, score: BigNumberish, tier: string],
    [string],
    "nonpayable"
  >;

  attestationHistory: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  creditScoreSchema: TypedContractMethod<[], [string], "view">;

  decodeAttestation: TypedContractMethod<
    [uid: BytesLike],
    [
      [string, bigint, string, bigint] & {
        user: string;
        score: bigint;
        tier: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  eas: TypedContractMethod<[], [string], "view">;

  getAttestationHistory: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  getLatestAttestation: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _easAddress: AddressLike,
      _schemaUID: BytesLike,
      _scoreOracle: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  latestAttestation: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  scoreOracle: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateOracle: TypedContractMethod<
    [newOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSchema: TypedContractMethod<
    [newSchema: BytesLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  verifyAttestation: TypedContractMethod<[uid: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "attestScore"
  ): TypedContractMethod<
    [user: AddressLike, score: BigNumberish, tier: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "attestationHistory"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "creditScoreSchema"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decodeAttestation"
  ): TypedContractMethod<
    [uid: BytesLike],
    [
      [string, bigint, string, bigint] & {
        user: string;
        score: bigint;
        tier: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "eas"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAttestationHistory"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getLatestAttestation"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _easAddress: AddressLike,
      _schemaUID: BytesLike,
      _scoreOracle: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "latestAttestation"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "scoreOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateOracle"
  ): TypedContractMethod<[newOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSchema"
  ): TypedContractMethod<[newSchema: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "verifyAttestation"
  ): TypedContractMethod<[uid: BytesLike], [boolean], "view">;

  getEvent(
    key: "AttestationCreated"
  ): TypedContractEvent<
    AttestationCreatedEvent.InputTuple,
    AttestationCreatedEvent.OutputTuple,
    AttestationCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OracleUpdated"
  ): TypedContractEvent<
    OracleUpdatedEvent.InputTuple,
    OracleUpdatedEvent.OutputTuple,
    OracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SchemaUpdated"
  ): TypedContractEvent<
    SchemaUpdatedEvent.InputTuple,
    SchemaUpdatedEvent.OutputTuple,
    SchemaUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AttestationCreated(address,bytes32,uint256,string,uint256)": TypedContractEvent<
      AttestationCreatedEvent.InputTuple,
      AttestationCreatedEvent.OutputTuple,
      AttestationCreatedEvent.OutputObject
    >;
    AttestationCreated: TypedContractEvent<
      AttestationCreatedEvent.InputTuple,
      AttestationCreatedEvent.OutputTuple,
      AttestationCreatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OracleUpdated(address,address)": TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;
    OracleUpdated: TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SchemaUpdated(bytes32,bytes32)": TypedContractEvent<
      SchemaUpdatedEvent.InputTuple,
      SchemaUpdatedEvent.OutputTuple,
      SchemaUpdatedEvent.OutputObject
    >;
    SchemaUpdated: TypedContractEvent<
      SchemaUpdatedEvent.InputTuple,
      SchemaUpdatedEvent.OutputTuple,
      SchemaUpdatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
