/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace HealthFactorMonitor {
  export type HealthStatusStruct = {
    collateralValue: BigNumberish;
    debtValue: BigNumberish;
    dynamicLTV: BigNumberish;
    healthFactor: BigNumberish;
    liquidatable: boolean;
    lastUpdate: BigNumberish;
  };

  export type HealthStatusStructOutput = [
    collateralValue: bigint,
    debtValue: bigint,
    dynamicLTV: bigint,
    healthFactor: bigint,
    liquidatable: boolean,
    lastUpdate: bigint
  ] & {
    collateralValue: bigint;
    debtValue: bigint;
    dynamicLTV: bigint;
    healthFactor: bigint;
    liquidatable: boolean;
    lastUpdate: bigint;
  };
}

export interface HealthFactorMonitorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LIQUIDATION_THRESHOLD"
      | "PRECISION"
      | "batchCalculateHealthFactors"
      | "calculateHealthFactor"
      | "getHealthStatus"
      | "getRequiredCollateral"
      | "getRiskLevel"
      | "healthStatuses"
      | "isLiquidatable"
      | "lendingPool"
      | "owner"
      | "priceOracle"
      | "renounceOwnership"
      | "reputationScorer"
      | "setLendingPool"
      | "setPriceOracle"
      | "setReputationScorer"
      | "transferOwnership"
      | "updateLiquidationThreshold"
      | "updateOracle"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "HealthFactorCritical"
      | "HealthFactorUpdated"
      | "OracleUpdated"
      | "OwnershipTransferred"
      | "ThresholdUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "LIQUIDATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchCalculateHealthFactors",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateHealthFactor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHealthStatus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredCollateral",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskLevel",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "healthStatuses",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationScorer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReputationScorer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidationThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOracle",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "LIQUIDATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchCalculateHealthFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHealthStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "healthStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationScorer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReputationScorer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOracle",
    data: BytesLike
  ): Result;
}

export namespace HealthFactorCriticalEvent {
  export type InputTuple = [
    borrower: AddressLike,
    loanId: BigNumberish,
    healthFactor: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    loanId: bigint,
    healthFactor: bigint
  ];
  export interface OutputObject {
    borrower: string;
    loanId: bigint;
    healthFactor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HealthFactorUpdatedEvent {
  export type InputTuple = [
    borrower: AddressLike,
    loanId: BigNumberish,
    healthFactor: BigNumberish,
    liquidatable: boolean
  ];
  export type OutputTuple = [
    borrower: string,
    loanId: bigint,
    healthFactor: bigint,
    liquidatable: boolean
  ];
  export interface OutputObject {
    borrower: string;
    loanId: bigint;
    healthFactor: bigint;
    liquidatable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleUpdatedEvent {
  export type InputTuple = [newOracle: AddressLike];
  export type OutputTuple = [newOracle: string];
  export interface OutputObject {
    newOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThresholdUpdatedEvent {
  export type InputTuple = [newThreshold: BigNumberish];
  export type OutputTuple = [newThreshold: bigint];
  export interface OutputObject {
    newThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HealthFactorMonitor extends BaseContract {
  connect(runner?: ContractRunner | null): HealthFactorMonitor;
  waitForDeployment(): Promise<this>;

  interface: HealthFactorMonitorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LIQUIDATION_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  PRECISION: TypedContractMethod<[], [bigint], "view">;

  batchCalculateHealthFactors: TypedContractMethod<
    [borrowers: AddressLike[], loanIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  calculateHealthFactor: TypedContractMethod<
    [borrower: AddressLike, loanId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getHealthStatus: TypedContractMethod<
    [borrower: AddressLike, loanId: BigNumberish],
    [HealthFactorMonitor.HealthStatusStructOutput],
    "view"
  >;

  getRequiredCollateral: TypedContractMethod<
    [borrower: AddressLike, loanId: BigNumberish, targetHF: BigNumberish],
    [bigint],
    "view"
  >;

  getRiskLevel: TypedContractMethod<
    [borrower: AddressLike, loanId: BigNumberish],
    [bigint],
    "view"
  >;

  healthStatuses: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        collateralValue: bigint;
        debtValue: bigint;
        dynamicLTV: bigint;
        healthFactor: bigint;
        liquidatable: boolean;
        lastUpdate: bigint;
      }
    ],
    "view"
  >;

  isLiquidatable: TypedContractMethod<
    [borrower: AddressLike, loanId: BigNumberish],
    [boolean],
    "view"
  >;

  lendingPool: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  priceOracle: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reputationScorer: TypedContractMethod<[], [string], "view">;

  setLendingPool: TypedContractMethod<
    [_lendingPool: AddressLike],
    [void],
    "nonpayable"
  >;

  setPriceOracle: TypedContractMethod<
    [_priceOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setReputationScorer: TypedContractMethod<
    [_reputationScorer: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateLiquidationThreshold: TypedContractMethod<
    [newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateOracle: TypedContractMethod<
    [newOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LIQUIDATION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchCalculateHealthFactors"
  ): TypedContractMethod<
    [borrowers: AddressLike[], loanIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateHealthFactor"
  ): TypedContractMethod<
    [borrower: AddressLike, loanId: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getHealthStatus"
  ): TypedContractMethod<
    [borrower: AddressLike, loanId: BigNumberish],
    [HealthFactorMonitor.HealthStatusStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequiredCollateral"
  ): TypedContractMethod<
    [borrower: AddressLike, loanId: BigNumberish, targetHF: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRiskLevel"
  ): TypedContractMethod<
    [borrower: AddressLike, loanId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "healthStatuses"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        collateralValue: bigint;
        debtValue: bigint;
        dynamicLTV: bigint;
        healthFactor: bigint;
        liquidatable: boolean;
        lastUpdate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLiquidatable"
  ): TypedContractMethod<
    [borrower: AddressLike, loanId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lendingPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reputationScorer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setLendingPool"
  ): TypedContractMethod<[_lendingPool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceOracle"
  ): TypedContractMethod<[_priceOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReputationScorer"
  ): TypedContractMethod<
    [_reputationScorer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLiquidationThreshold"
  ): TypedContractMethod<[newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateOracle"
  ): TypedContractMethod<[newOracle: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "HealthFactorCritical"
  ): TypedContractEvent<
    HealthFactorCriticalEvent.InputTuple,
    HealthFactorCriticalEvent.OutputTuple,
    HealthFactorCriticalEvent.OutputObject
  >;
  getEvent(
    key: "HealthFactorUpdated"
  ): TypedContractEvent<
    HealthFactorUpdatedEvent.InputTuple,
    HealthFactorUpdatedEvent.OutputTuple,
    HealthFactorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OracleUpdated"
  ): TypedContractEvent<
    OracleUpdatedEvent.InputTuple,
    OracleUpdatedEvent.OutputTuple,
    OracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ThresholdUpdated"
  ): TypedContractEvent<
    ThresholdUpdatedEvent.InputTuple,
    ThresholdUpdatedEvent.OutputTuple,
    ThresholdUpdatedEvent.OutputObject
  >;

  filters: {
    "HealthFactorCritical(address,uint256,uint256)": TypedContractEvent<
      HealthFactorCriticalEvent.InputTuple,
      HealthFactorCriticalEvent.OutputTuple,
      HealthFactorCriticalEvent.OutputObject
    >;
    HealthFactorCritical: TypedContractEvent<
      HealthFactorCriticalEvent.InputTuple,
      HealthFactorCriticalEvent.OutputTuple,
      HealthFactorCriticalEvent.OutputObject
    >;

    "HealthFactorUpdated(address,uint256,uint256,bool)": TypedContractEvent<
      HealthFactorUpdatedEvent.InputTuple,
      HealthFactorUpdatedEvent.OutputTuple,
      HealthFactorUpdatedEvent.OutputObject
    >;
    HealthFactorUpdated: TypedContractEvent<
      HealthFactorUpdatedEvent.InputTuple,
      HealthFactorUpdatedEvent.OutputTuple,
      HealthFactorUpdatedEvent.OutputObject
    >;

    "OracleUpdated(address)": TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;
    OracleUpdated: TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ThresholdUpdated(uint256)": TypedContractEvent<
      ThresholdUpdatedEvent.InputTuple,
      ThresholdUpdatedEvent.OutputTuple,
      ThresholdUpdatedEvent.OutputObject
    >;
    ThresholdUpdated: TypedContractEvent<
      ThresholdUpdatedEvent.InputTuple,
      ThresholdUpdatedEvent.OutputTuple,
      ThresholdUpdatedEvent.OutputObject
    >;
  };
}
