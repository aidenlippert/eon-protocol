/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DutchAuctionLiquidator {
  export type LiquidationAuctionStruct = {
    loanId: BigNumberish;
    borrower: AddressLike;
    debtAmount: BigNumberish;
    collateralAmount: BigNumberish;
    startTime: BigNumberish;
    gracePeriodEnd: BigNumberish;
    auctionDuration: BigNumberish;
    maxDiscount: BigNumberish;
    executed: boolean;
    executor: AddressLike;
    executedAt: BigNumberish;
  };

  export type LiquidationAuctionStructOutput = [
    loanId: bigint,
    borrower: string,
    debtAmount: bigint,
    collateralAmount: bigint,
    startTime: bigint,
    gracePeriodEnd: bigint,
    auctionDuration: bigint,
    maxDiscount: bigint,
    executed: boolean,
    executor: string,
    executedAt: bigint
  ] & {
    loanId: bigint;
    borrower: string;
    debtAmount: bigint;
    collateralAmount: bigint;
    startTime: bigint;
    gracePeriodEnd: bigint;
    auctionDuration: bigint;
    maxDiscount: bigint;
    executed: boolean;
    executor: string;
    executedAt: bigint;
  };
}

export interface DutchAuctionLiquidatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUCTION_DURATION"
      | "BASIS_POINTS"
      | "BRONZE_GRACE_PERIOD"
      | "GOLD_GRACE_PERIOD"
      | "MAX_DISCOUNT_BPS"
      | "PLATINUM_GRACE_PERIOD"
      | "SILVER_GRACE_PERIOD"
      | "auctionCounter"
      | "auctions"
      | "cancelAuction"
      | "executeLiquidation"
      | "getAuction"
      | "getCurrentDiscount"
      | "getGracePeriod"
      | "getGracePeriodRemaining"
      | "isExecutable"
      | "lendingPool"
      | "owner"
      | "renounceOwnership"
      | "reputationScorer"
      | "setLendingPool"
      | "setReputationScorer"
      | "startLiquidation"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuctionCancelled"
      | "AuctionExecuted"
      | "AuctionStarted"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUCTION_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BRONZE_GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOLD_GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DISCOUNT_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATINUM_GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SILVER_GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeLiquidation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDiscount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGracePeriod",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGracePeriodRemaining",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExecutable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationScorer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReputationScorer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startLiquidation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUCTION_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BRONZE_GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOLD_GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DISCOUNT_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATINUM_GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SILVER_GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGracePeriodRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExecutable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationScorer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReputationScorer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AuctionCancelledEvent {
  export type InputTuple = [auctionId: BigNumberish, reason: string];
  export type OutputTuple = [auctionId: bigint, reason: string];
  export interface OutputObject {
    auctionId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionExecutedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    loanId: BigNumberish,
    executor: AddressLike,
    discountBps: BigNumberish,
    collateralReceived: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    loanId: bigint,
    executor: string,
    discountBps: bigint,
    collateralReceived: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    loanId: bigint;
    executor: string;
    discountBps: bigint;
    collateralReceived: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionStartedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    loanId: BigNumberish,
    borrower: AddressLike,
    debtAmount: BigNumberish,
    collateralAmount: BigNumberish,
    gracePeriodEnd: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    loanId: bigint,
    borrower: string,
    debtAmount: bigint,
    collateralAmount: bigint,
    gracePeriodEnd: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    loanId: bigint;
    borrower: string;
    debtAmount: bigint;
    collateralAmount: bigint;
    gracePeriodEnd: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DutchAuctionLiquidator extends BaseContract {
  connect(runner?: ContractRunner | null): DutchAuctionLiquidator;
  waitForDeployment(): Promise<this>;

  interface: DutchAuctionLiquidatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUCTION_DURATION: TypedContractMethod<[], [bigint], "view">;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  BRONZE_GRACE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  GOLD_GRACE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  MAX_DISCOUNT_BPS: TypedContractMethod<[], [bigint], "view">;

  PLATINUM_GRACE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  SILVER_GRACE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  auctionCounter: TypedContractMethod<[], [bigint], "view">;

  auctions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint
      ] & {
        loanId: bigint;
        borrower: string;
        debtAmount: bigint;
        collateralAmount: bigint;
        startTime: bigint;
        gracePeriodEnd: bigint;
        auctionDuration: bigint;
        maxDiscount: bigint;
        executed: boolean;
        executor: string;
        executedAt: bigint;
      }
    ],
    "view"
  >;

  cancelAuction: TypedContractMethod<
    [auctionId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  executeLiquidation: TypedContractMethod<
    [auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAuction: TypedContractMethod<
    [auctionId: BigNumberish],
    [DutchAuctionLiquidator.LiquidationAuctionStructOutput],
    "view"
  >;

  getCurrentDiscount: TypedContractMethod<
    [auctionId: BigNumberish],
    [bigint],
    "view"
  >;

  getGracePeriod: TypedContractMethod<
    [borrower: AddressLike],
    [bigint],
    "view"
  >;

  getGracePeriodRemaining: TypedContractMethod<
    [auctionId: BigNumberish],
    [bigint],
    "view"
  >;

  isExecutable: TypedContractMethod<
    [auctionId: BigNumberish],
    [boolean],
    "view"
  >;

  lendingPool: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reputationScorer: TypedContractMethod<[], [string], "view">;

  setLendingPool: TypedContractMethod<
    [_lendingPool: AddressLike],
    [void],
    "nonpayable"
  >;

  setReputationScorer: TypedContractMethod<
    [_reputationScorer: AddressLike],
    [void],
    "nonpayable"
  >;

  startLiquidation: TypedContractMethod<
    [loanId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUCTION_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BRONZE_GRACE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GOLD_GRACE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_DISCOUNT_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PLATINUM_GRACE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SILVER_GRACE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctionCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint
      ] & {
        loanId: bigint;
        borrower: string;
        debtAmount: bigint;
        collateralAmount: bigint;
        startTime: bigint;
        gracePeriodEnd: bigint;
        auctionDuration: bigint;
        maxDiscount: bigint;
        executed: boolean;
        executor: string;
        executedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelAuction"
  ): TypedContractMethod<
    [auctionId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeLiquidation"
  ): TypedContractMethod<[auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAuction"
  ): TypedContractMethod<
    [auctionId: BigNumberish],
    [DutchAuctionLiquidator.LiquidationAuctionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentDiscount"
  ): TypedContractMethod<[auctionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGracePeriod"
  ): TypedContractMethod<[borrower: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGracePeriodRemaining"
  ): TypedContractMethod<[auctionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isExecutable"
  ): TypedContractMethod<[auctionId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "lendingPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reputationScorer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setLendingPool"
  ): TypedContractMethod<[_lendingPool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReputationScorer"
  ): TypedContractMethod<
    [_reputationScorer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startLiquidation"
  ): TypedContractMethod<[loanId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AuctionCancelled"
  ): TypedContractEvent<
    AuctionCancelledEvent.InputTuple,
    AuctionCancelledEvent.OutputTuple,
    AuctionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "AuctionExecuted"
  ): TypedContractEvent<
    AuctionExecutedEvent.InputTuple,
    AuctionExecutedEvent.OutputTuple,
    AuctionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionStarted"
  ): TypedContractEvent<
    AuctionStartedEvent.InputTuple,
    AuctionStartedEvent.OutputTuple,
    AuctionStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AuctionCancelled(uint256,string)": TypedContractEvent<
      AuctionCancelledEvent.InputTuple,
      AuctionCancelledEvent.OutputTuple,
      AuctionCancelledEvent.OutputObject
    >;
    AuctionCancelled: TypedContractEvent<
      AuctionCancelledEvent.InputTuple,
      AuctionCancelledEvent.OutputTuple,
      AuctionCancelledEvent.OutputObject
    >;

    "AuctionExecuted(uint256,uint256,address,uint256,uint256)": TypedContractEvent<
      AuctionExecutedEvent.InputTuple,
      AuctionExecutedEvent.OutputTuple,
      AuctionExecutedEvent.OutputObject
    >;
    AuctionExecuted: TypedContractEvent<
      AuctionExecutedEvent.InputTuple,
      AuctionExecutedEvent.OutputTuple,
      AuctionExecutedEvent.OutputObject
    >;

    "AuctionStarted(uint256,uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      AuctionStartedEvent.InputTuple,
      AuctionStartedEvent.OutputTuple,
      AuctionStartedEvent.OutputObject
    >;
    AuctionStarted: TypedContractEvent<
      AuctionStartedEvent.InputTuple,
      AuctionStartedEvent.OutputTuple,
      AuctionStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
