/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace InsuranceFund {
  export type CoverageRecordStruct = {
    loanId: BigNumberish;
    lender: AddressLike;
    lossAmount: BigNumberish;
    coveredAmount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type CoverageRecordStructOutput = [
    loanId: bigint,
    lender: string,
    lossAmount: bigint,
    coveredAmount: bigint,
    timestamp: bigint
  ] & {
    loanId: bigint;
    lender: string;
    lossAmount: bigint;
    coveredAmount: bigint;
    timestamp: bigint;
  };
}

export interface InsuranceFundInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS"
      | "MAX_COVERAGE_BPS"
      | "MAX_COVERAGE_PERCENT"
      | "PERCENTAGE_DENOMINATOR"
      | "REVENUE_ALLOCATION_PERCENT"
      | "REVENUE_PERCENTAGE"
      | "allocateRevenue"
      | "authorizedRequestors"
      | "canCoverLoss"
      | "coverLoss"
      | "coverageHistory"
      | "deposit"
      | "emergencyWithdraw"
      | "getAvailableCoverage"
      | "getCoverageHistory"
      | "getCoverageHistoryCount"
      | "getDefaultHistory"
      | "getMaxCoveragePercent"
      | "getStatistics"
      | "lenderContributions"
      | "owner"
      | "renounceOwnership"
      | "setAuthorizedRequestor"
      | "stablecoin"
      | "totalCovered"
      | "totalDefaults"
      | "totalFunds"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedRequestorSet"
      | "Deposit"
      | "EmergencyWithdrawal"
      | "FundsDeposited"
      | "LossCovered"
      | "OwnershipTransferred"
      | "RevenueAllocated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_COVERAGE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_COVERAGE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVENUE_ALLOCATION_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVENUE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocateRevenue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedRequestors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canCoverLoss",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "coverLoss",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "coverageHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableCoverage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoverageHistory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoverageHistoryCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxCoveragePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatistics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lenderContributions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedRequestor",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCovered",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDefaults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_COVERAGE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_COVERAGE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVENUE_ALLOCATION_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVENUE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocateRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedRequestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canCoverLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coverLoss", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coverageHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableCoverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoverageHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoverageHistoryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxCoveragePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedRequestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stablecoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCovered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDefaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AuthorizedRequestorSetEvent {
  export type InputTuple = [requestor: AddressLike, authorized: boolean];
  export type OutputTuple = [requestor: string, authorized: boolean];
  export interface OutputObject {
    requestor: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [depositor: AddressLike, amount: BigNumberish];
  export type OutputTuple = [depositor: string, amount: bigint];
  export interface OutputObject {
    depositor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawalEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDepositedEvent {
  export type InputTuple = [
    depositor: AddressLike,
    amount: BigNumberish,
    newTotal: BigNumberish
  ];
  export type OutputTuple = [
    depositor: string,
    amount: bigint,
    newTotal: bigint
  ];
  export interface OutputObject {
    depositor: string;
    amount: bigint;
    newTotal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LossCoveredEvent {
  export type InputTuple = [
    loanId: BigNumberish,
    lender: AddressLike,
    lossAmount: BigNumberish,
    coveredAmount: BigNumberish
  ];
  export type OutputTuple = [
    loanId: bigint,
    lender: string,
    lossAmount: bigint,
    coveredAmount: bigint
  ];
  export interface OutputObject {
    loanId: bigint;
    lender: string;
    lossAmount: bigint;
    coveredAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevenueAllocatedEvent {
  export type InputTuple = [
    protocolRevenue: BigNumberish,
    allocationAmount: BigNumberish
  ];
  export type OutputTuple = [protocolRevenue: bigint, allocationAmount: bigint];
  export interface OutputObject {
    protocolRevenue: bigint;
    allocationAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface InsuranceFund extends BaseContract {
  connect(runner?: ContractRunner | null): InsuranceFund;
  waitForDeployment(): Promise<this>;

  interface: InsuranceFundInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  MAX_COVERAGE_BPS: TypedContractMethod<[], [bigint], "view">;

  MAX_COVERAGE_PERCENT: TypedContractMethod<[], [bigint], "view">;

  PERCENTAGE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  REVENUE_ALLOCATION_PERCENT: TypedContractMethod<[], [bigint], "view">;

  REVENUE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  allocateRevenue: TypedContractMethod<
    [protocolRevenue: BigNumberish],
    [void],
    "nonpayable"
  >;

  authorizedRequestors: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  canCoverLoss: TypedContractMethod<
    [principal: BigNumberish],
    [boolean],
    "view"
  >;

  coverLoss: TypedContractMethod<
    [
      lender: AddressLike,
      loanId: BigNumberish,
      principal: BigNumberish,
      lossAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  coverageHistory: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint] & {
        loanId: bigint;
        lender: string;
        lossAmount: bigint;
        coveredAmount: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  deposit: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  emergencyWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAvailableCoverage: TypedContractMethod<
    [principal: BigNumberish],
    [bigint],
    "view"
  >;

  getCoverageHistory: TypedContractMethod<
    [startIndex: BigNumberish, count: BigNumberish],
    [InsuranceFund.CoverageRecordStructOutput[]],
    "view"
  >;

  getCoverageHistoryCount: TypedContractMethod<[], [bigint], "view">;

  getDefaultHistory: TypedContractMethod<
    [loanId: BigNumberish],
    [InsuranceFund.CoverageRecordStructOutput],
    "view"
  >;

  getMaxCoveragePercent: TypedContractMethod<
    [principal: BigNumberish],
    [bigint],
    "view"
  >;

  getStatistics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalFunds: bigint;
        _totalCovered: bigint;
        _totalDefaults: bigint;
        _utilizationRate: bigint;
      }
    ],
    "view"
  >;

  lenderContributions: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAuthorizedRequestor: TypedContractMethod<
    [requestor: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  stablecoin: TypedContractMethod<[], [string], "view">;

  totalCovered: TypedContractMethod<[], [bigint], "view">;

  totalDefaults: TypedContractMethod<[], [bigint], "view">;

  totalFunds: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_COVERAGE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_COVERAGE_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PERCENTAGE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REVENUE_ALLOCATION_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REVENUE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allocateRevenue"
  ): TypedContractMethod<[protocolRevenue: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedRequestors"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "canCoverLoss"
  ): TypedContractMethod<[principal: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "coverLoss"
  ): TypedContractMethod<
    [
      lender: AddressLike,
      loanId: BigNumberish,
      principal: BigNumberish,
      lossAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "coverageHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint] & {
        loanId: bigint;
        lender: string;
        lossAmount: bigint;
        coveredAmount: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAvailableCoverage"
  ): TypedContractMethod<[principal: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCoverageHistory"
  ): TypedContractMethod<
    [startIndex: BigNumberish, count: BigNumberish],
    [InsuranceFund.CoverageRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCoverageHistoryCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDefaultHistory"
  ): TypedContractMethod<
    [loanId: BigNumberish],
    [InsuranceFund.CoverageRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMaxCoveragePercent"
  ): TypedContractMethod<[principal: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStatistics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalFunds: bigint;
        _totalCovered: bigint;
        _totalDefaults: bigint;
        _utilizationRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lenderContributions"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAuthorizedRequestor"
  ): TypedContractMethod<
    [requestor: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stablecoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalCovered"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDefaults"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFunds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AuthorizedRequestorSet"
  ): TypedContractEvent<
    AuthorizedRequestorSetEvent.InputTuple,
    AuthorizedRequestorSetEvent.OutputTuple,
    AuthorizedRequestorSetEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdrawal"
  ): TypedContractEvent<
    EmergencyWithdrawalEvent.InputTuple,
    EmergencyWithdrawalEvent.OutputTuple,
    EmergencyWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "FundsDeposited"
  ): TypedContractEvent<
    FundsDepositedEvent.InputTuple,
    FundsDepositedEvent.OutputTuple,
    FundsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "LossCovered"
  ): TypedContractEvent<
    LossCoveredEvent.InputTuple,
    LossCoveredEvent.OutputTuple,
    LossCoveredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RevenueAllocated"
  ): TypedContractEvent<
    RevenueAllocatedEvent.InputTuple,
    RevenueAllocatedEvent.OutputTuple,
    RevenueAllocatedEvent.OutputObject
  >;

  filters: {
    "AuthorizedRequestorSet(address,bool)": TypedContractEvent<
      AuthorizedRequestorSetEvent.InputTuple,
      AuthorizedRequestorSetEvent.OutputTuple,
      AuthorizedRequestorSetEvent.OutputObject
    >;
    AuthorizedRequestorSet: TypedContractEvent<
      AuthorizedRequestorSetEvent.InputTuple,
      AuthorizedRequestorSetEvent.OutputTuple,
      AuthorizedRequestorSetEvent.OutputObject
    >;

    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "EmergencyWithdrawal(address,uint256)": TypedContractEvent<
      EmergencyWithdrawalEvent.InputTuple,
      EmergencyWithdrawalEvent.OutputTuple,
      EmergencyWithdrawalEvent.OutputObject
    >;
    EmergencyWithdrawal: TypedContractEvent<
      EmergencyWithdrawalEvent.InputTuple,
      EmergencyWithdrawalEvent.OutputTuple,
      EmergencyWithdrawalEvent.OutputObject
    >;

    "FundsDeposited(address,uint256,uint256)": TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
    FundsDeposited: TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;

    "LossCovered(uint256,address,uint256,uint256)": TypedContractEvent<
      LossCoveredEvent.InputTuple,
      LossCoveredEvent.OutputTuple,
      LossCoveredEvent.OutputObject
    >;
    LossCovered: TypedContractEvent<
      LossCoveredEvent.InputTuple,
      LossCoveredEvent.OutputTuple,
      LossCoveredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RevenueAllocated(uint256,uint256)": TypedContractEvent<
      RevenueAllocatedEvent.InputTuple,
      RevenueAllocatedEvent.OutputTuple,
      RevenueAllocatedEvent.OutputObject
    >;
    RevenueAllocated: TypedContractEvent<
      RevenueAllocatedEvent.InputTuple,
      RevenueAllocatedEvent.OutputTuple,
      RevenueAllocatedEvent.OutputObject
    >;
  };
}
