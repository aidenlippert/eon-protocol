/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace CreditRegistryV3Upgradeable {
  export type KYCProofStruct = {
    credentialHash: BytesLike;
    verifiedAt: BigNumberish;
    expiresAt: BigNumberish;
  };

  export type KYCProofStructOutput = [
    credentialHash: string,
    verifiedAt: bigint,
    expiresAt: bigint
  ] & { credentialHash: string; verifiedAt: bigint; expiresAt: bigint };

  export type StakeInfoStruct = {
    amount: BigNumberish;
    lockUntil: BigNumberish;
  };

  export type StakeInfoStructOutput = [amount: bigint, lockUntil: bigint] & {
    amount: bigint;
    lockUntil: bigint;
  };

  export type AggregateCreditDataStruct = {
    totalLoans: BigNumberish;
    repaidLoans: BigNumberish;
    liquidatedLoans: BigNumberish;
    activeLoans: BigNumberish;
    totalCollateralUsd18: BigNumberish;
    totalBorrowedUsd18: BigNumberish;
    maxLtvBorrowCount: BigNumberish;
    firstSeen: BigNumberish;
    kyc: CreditRegistryV3Upgradeable.KYCProofStruct;
    stake: CreditRegistryV3Upgradeable.StakeInfoStruct;
  };

  export type AggregateCreditDataStructOutput = [
    totalLoans: bigint,
    repaidLoans: bigint,
    liquidatedLoans: bigint,
    activeLoans: bigint,
    totalCollateralUsd18: bigint,
    totalBorrowedUsd18: bigint,
    maxLtvBorrowCount: bigint,
    firstSeen: bigint,
    kyc: CreditRegistryV3Upgradeable.KYCProofStructOutput,
    stake: CreditRegistryV3Upgradeable.StakeInfoStructOutput
  ] & {
    totalLoans: bigint;
    repaidLoans: bigint;
    liquidatedLoans: bigint;
    activeLoans: bigint;
    totalCollateralUsd18: bigint;
    totalBorrowedUsd18: bigint;
    maxLtvBorrowCount: bigint;
    firstSeen: bigint;
    kyc: CreditRegistryV3Upgradeable.KYCProofStructOutput;
    stake: CreditRegistryV3Upgradeable.StakeInfoStructOutput;
  };

  export type CrossChainScoreStruct = {
    overallScore: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type CrossChainScoreStructOutput = [
    overallScore: bigint,
    updatedAt: bigint
  ] & { overallScore: bigint; updatedAt: bigint };

  export type GovernanceActivityStruct = {
    voteCount: BigNumberish;
    proposalCount: BigNumberish;
    lastVoteTimestamp: BigNumberish;
  };

  export type GovernanceActivityStructOutput = [
    voteCount: bigint,
    proposalCount: bigint,
    lastVoteTimestamp: bigint
  ] & { voteCount: bigint; proposalCount: bigint; lastVoteTimestamp: bigint };

  export type LoanRecordStruct = {
    loanId: BigNumberish;
    borrower: AddressLike;
    principalUsd18: BigNumberish;
    repaidUsd18: BigNumberish;
    timestamp: BigNumberish;
    status: BigNumberish;
    lender: AddressLike;
  };

  export type LoanRecordStructOutput = [
    loanId: bigint,
    borrower: string,
    principalUsd18: bigint,
    repaidUsd18: bigint,
    timestamp: bigint,
    status: bigint,
    lender: string
  ] & {
    loanId: bigint;
    borrower: string;
    principalUsd18: bigint;
    repaidUsd18: bigint;
    timestamp: bigint;
    status: bigint;
    lender: string;
  };
}

export interface CreditRegistryV3UpgradeableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "aggregateCreditData"
      | "authorizedCCIPSenders"
      | "authorizedGovernance"
      | "authorizedLenders"
      | "collateralData"
      | "crossChainScores"
      | "depositStake"
      | "getAggregateCreditData"
      | "getCrossChainScore"
      | "getGovernanceActivity"
      | "getLoan"
      | "getUserCollateralAssets"
      | "getUserLoans"
      | "governanceActivity"
      | "initialize"
      | "loans"
      | "nextLoanId"
      | "owner"
      | "proxiableUUID"
      | "receiveCrossChainScore"
      | "recordCollateralData"
      | "recordKYCProof"
      | "recordProposal"
      | "recordVote"
      | "registerLiquidation"
      | "registerLoan"
      | "registerRepayment"
      | "renounceOwnership"
      | "setCCIPSenderAuthorization"
      | "setGovernanceAuthorization"
      | "setLenderAuthorization"
      | "stakeToken"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "userLoanIds"
      | "version"
      | "withdrawStake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CCIPSenderAuthorized"
      | "CollateralDataRecorded"
      | "CrossChainReputationReceived"
      | "FirstSeenRecorded"
      | "GovernanceAuthorized"
      | "Initialized"
      | "KYCVerified"
      | "LenderAuthorized"
      | "LiquidationRegistered"
      | "LoanRegistered"
      | "OwnershipTransferred"
      | "ProposalRecorded"
      | "RepaymentRegistered"
      | "StakeDeposited"
      | "StakeWithdrawn"
      | "Upgraded"
      | "VoteRecorded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aggregateCreditData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedCCIPSenders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedGovernance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedLenders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "crossChainScores",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositStake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAggregateCreditData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCrossChainScore",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernanceActivity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCollateralAssets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLoans",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceActivity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nextLoanId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveCrossChainScore",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordCollateralData",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordKYCProof",
    values: [AddressLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordProposal",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordVote",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerLiquidation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerLoan",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRepayment",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCCIPSenderAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernanceAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLenderAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userLoanIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregateCreditData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedCCIPSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedLenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossChainScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAggregateCreditData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCrossChainScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernanceActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserCollateralAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextLoanId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveCrossChainScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordCollateralData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordKYCProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recordVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRepayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCCIPSenderAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLenderAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLoanIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
}

export namespace CCIPSenderAuthorizedEvent {
  export type InputTuple = [sender: AddressLike, allowed: boolean];
  export type OutputTuple = [sender: string, allowed: boolean];
  export interface OutputObject {
    sender: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralDataRecordedEvent {
  export type InputTuple = [
    loanId: BigNumberish,
    collateralToken: AddressLike,
    collateralValueUsd18: BigNumberish,
    userScore: BigNumberish
  ];
  export type OutputTuple = [
    loanId: bigint,
    collateralToken: string,
    collateralValueUsd18: bigint,
    userScore: bigint
  ];
  export interface OutputObject {
    loanId: bigint;
    collateralToken: string;
    collateralValueUsd18: bigint;
    userScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainReputationReceivedEvent {
  export type InputTuple = [
    user: AddressLike,
    sourceChainSelector: BigNumberish,
    score: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    sourceChainSelector: bigint,
    score: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    sourceChainSelector: bigint;
    score: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FirstSeenRecordedEvent {
  export type InputTuple = [wallet: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [wallet: string, timestamp: bigint];
  export interface OutputObject {
    wallet: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceAuthorizedEvent {
  export type InputTuple = [governance: AddressLike, allowed: boolean];
  export type OutputTuple = [governance: string, allowed: boolean];
  export interface OutputObject {
    governance: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KYCVerifiedEvent {
  export type InputTuple = [
    user: AddressLike,
    credentialHash: BytesLike,
    expiresAt: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    credentialHash: string,
    expiresAt: bigint
  ];
  export interface OutputObject {
    user: string;
    credentialHash: string;
    expiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LenderAuthorizedEvent {
  export type InputTuple = [lender: AddressLike, allowed: boolean];
  export type OutputTuple = [lender: string, allowed: boolean];
  export interface OutputObject {
    lender: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationRegisteredEvent {
  export type InputTuple = [
    borrower: AddressLike,
    loanId: BigNumberish,
    amountUsd18: BigNumberish,
    timestamp: BigNumberish,
    liquidator: AddressLike
  ];
  export type OutputTuple = [
    borrower: string,
    loanId: bigint,
    amountUsd18: bigint,
    timestamp: bigint,
    liquidator: string
  ];
  export interface OutputObject {
    borrower: string;
    loanId: bigint;
    amountUsd18: bigint;
    timestamp: bigint;
    liquidator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanRegisteredEvent {
  export type InputTuple = [
    borrower: AddressLike,
    loanId: BigNumberish,
    principalUsd18: BigNumberish,
    timestamp: BigNumberish,
    lender: AddressLike
  ];
  export type OutputTuple = [
    borrower: string,
    loanId: bigint,
    principalUsd18: bigint,
    timestamp: bigint,
    lender: string
  ];
  export interface OutputObject {
    borrower: string;
    loanId: bigint;
    principalUsd18: bigint;
    timestamp: bigint;
    lender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalRecordedEvent {
  export type InputTuple = [
    proposer: AddressLike,
    proposalId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    proposer: string,
    proposalId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    proposer: string;
    proposalId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepaymentRegisteredEvent {
  export type InputTuple = [
    borrower: AddressLike,
    loanId: BigNumberish,
    amountUsd18: BigNumberish,
    timestamp: BigNumberish,
    payer: AddressLike
  ];
  export type OutputTuple = [
    borrower: string,
    loanId: bigint,
    amountUsd18: bigint,
    timestamp: bigint,
    payer: string
  ];
  export interface OutputObject {
    borrower: string;
    loanId: bigint;
    amountUsd18: bigint;
    timestamp: bigint;
    payer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeDepositedEvent {
  export type InputTuple = [
    staker: AddressLike,
    amount: BigNumberish,
    lockUntil: BigNumberish
  ];
  export type OutputTuple = [staker: string, amount: bigint, lockUntil: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
    lockUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeWithdrawnEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteRecordedEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    proposalId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CreditRegistryV3Upgradeable extends BaseContract {
  connect(runner?: ContractRunner | null): CreditRegistryV3Upgradeable;
  waitForDeployment(): Promise<this>;

  interface: CreditRegistryV3UpgradeableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  aggregateCreditData: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        CreditRegistryV3Upgradeable.KYCProofStructOutput,
        CreditRegistryV3Upgradeable.StakeInfoStructOutput
      ] & {
        totalLoans: bigint;
        repaidLoans: bigint;
        liquidatedLoans: bigint;
        activeLoans: bigint;
        totalCollateralUsd18: bigint;
        totalBorrowedUsd18: bigint;
        maxLtvBorrowCount: bigint;
        firstSeen: bigint;
        kyc: CreditRegistryV3Upgradeable.KYCProofStructOutput;
        stake: CreditRegistryV3Upgradeable.StakeInfoStructOutput;
      }
    ],
    "view"
  >;

  authorizedCCIPSenders: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  authorizedGovernance: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  authorizedLenders: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  collateralData: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        collateralToken: string;
        collateralValueUsd18: bigint;
        principalUsd18: bigint;
        userScoreAtBorrow: bigint;
      }
    ],
    "view"
  >;

  crossChainScores: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { overallScore: bigint; updatedAt: bigint }],
    "view"
  >;

  depositStake: TypedContractMethod<
    [amount: BigNumberish, lockDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAggregateCreditData: TypedContractMethod<
    [user: AddressLike],
    [CreditRegistryV3Upgradeable.AggregateCreditDataStructOutput],
    "view"
  >;

  getCrossChainScore: TypedContractMethod<
    [user: AddressLike, chainSelector: BigNumberish],
    [CreditRegistryV3Upgradeable.CrossChainScoreStructOutput],
    "view"
  >;

  getGovernanceActivity: TypedContractMethod<
    [user: AddressLike],
    [CreditRegistryV3Upgradeable.GovernanceActivityStructOutput],
    "view"
  >;

  getLoan: TypedContractMethod<
    [loanId: BigNumberish],
    [CreditRegistryV3Upgradeable.LoanRecordStructOutput],
    "view"
  >;

  getUserCollateralAssets: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  getUserLoans: TypedContractMethod<
    [borrower: AddressLike],
    [bigint[]],
    "view"
  >;

  governanceActivity: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        voteCount: bigint;
        proposalCount: bigint;
        lastVoteTimestamp: bigint;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<
    [_owner: AddressLike, _stakeToken: AddressLike],
    [void],
    "nonpayable"
  >;

  loans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, string] & {
        loanId: bigint;
        borrower: string;
        principalUsd18: bigint;
        repaidUsd18: bigint;
        timestamp: bigint;
        status: bigint;
        lender: string;
      }
    ],
    "view"
  >;

  nextLoanId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  receiveCrossChainScore: TypedContractMethod<
    [user: AddressLike, sourceChainSelector: BigNumberish, score: BigNumberish],
    [void],
    "nonpayable"
  >;

  recordCollateralData: TypedContractMethod<
    [
      loanId: BigNumberish,
      collateralToken: AddressLike,
      collateralValueUsd18: BigNumberish,
      userScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  recordKYCProof: TypedContractMethod<
    [
      user: AddressLike,
      credentialHash: BytesLike,
      expiresAt: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  recordProposal: TypedContractMethod<
    [proposer: AddressLike, proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  recordVote: TypedContractMethod<
    [voter: AddressLike, proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerLiquidation: TypedContractMethod<
    [loanId: BigNumberish, recoveredUsd18: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerLoan: TypedContractMethod<
    [borrower: AddressLike, principalUsd18: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  registerRepayment: TypedContractMethod<
    [loanId: BigNumberish, amountUsd18: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCCIPSenderAuthorization: TypedContractMethod<
    [sender: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  setGovernanceAuthorization: TypedContractMethod<
    [governance: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  setLenderAuthorization: TypedContractMethod<
    [lender: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  stakeToken: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  userLoanIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  version: TypedContractMethod<[], [string], "view">;

  withdrawStake: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "aggregateCreditData"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        CreditRegistryV3Upgradeable.KYCProofStructOutput,
        CreditRegistryV3Upgradeable.StakeInfoStructOutput
      ] & {
        totalLoans: bigint;
        repaidLoans: bigint;
        liquidatedLoans: bigint;
        activeLoans: bigint;
        totalCollateralUsd18: bigint;
        totalBorrowedUsd18: bigint;
        maxLtvBorrowCount: bigint;
        firstSeen: bigint;
        kyc: CreditRegistryV3Upgradeable.KYCProofStructOutput;
        stake: CreditRegistryV3Upgradeable.StakeInfoStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "authorizedCCIPSenders"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedGovernance"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedLenders"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "collateralData"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        collateralToken: string;
        collateralValueUsd18: bigint;
        principalUsd18: bigint;
        userScoreAtBorrow: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "crossChainScores"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { overallScore: bigint; updatedAt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "depositStake"
  ): TypedContractMethod<
    [amount: BigNumberish, lockDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAggregateCreditData"
  ): TypedContractMethod<
    [user: AddressLike],
    [CreditRegistryV3Upgradeable.AggregateCreditDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCrossChainScore"
  ): TypedContractMethod<
    [user: AddressLike, chainSelector: BigNumberish],
    [CreditRegistryV3Upgradeable.CrossChainScoreStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGovernanceActivity"
  ): TypedContractMethod<
    [user: AddressLike],
    [CreditRegistryV3Upgradeable.GovernanceActivityStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLoan"
  ): TypedContractMethod<
    [loanId: BigNumberish],
    [CreditRegistryV3Upgradeable.LoanRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCollateralAssets"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserLoans"
  ): TypedContractMethod<[borrower: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "governanceActivity"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        voteCount: bigint;
        proposalCount: bigint;
        lastVoteTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_owner: AddressLike, _stakeToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "loans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, string] & {
        loanId: bigint;
        borrower: string;
        principalUsd18: bigint;
        repaidUsd18: bigint;
        timestamp: bigint;
        status: bigint;
        lender: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextLoanId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveCrossChainScore"
  ): TypedContractMethod<
    [user: AddressLike, sourceChainSelector: BigNumberish, score: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordCollateralData"
  ): TypedContractMethod<
    [
      loanId: BigNumberish,
      collateralToken: AddressLike,
      collateralValueUsd18: BigNumberish,
      userScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordKYCProof"
  ): TypedContractMethod<
    [
      user: AddressLike,
      credentialHash: BytesLike,
      expiresAt: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordProposal"
  ): TypedContractMethod<
    [proposer: AddressLike, proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordVote"
  ): TypedContractMethod<
    [voter: AddressLike, proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerLiquidation"
  ): TypedContractMethod<
    [loanId: BigNumberish, recoveredUsd18: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerLoan"
  ): TypedContractMethod<
    [borrower: AddressLike, principalUsd18: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerRepayment"
  ): TypedContractMethod<
    [loanId: BigNumberish, amountUsd18: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCCIPSenderAuthorization"
  ): TypedContractMethod<
    [sender: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGovernanceAuthorization"
  ): TypedContractMethod<
    [governance: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLenderAuthorization"
  ): TypedContractMethod<
    [lender: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userLoanIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawStake"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CCIPSenderAuthorized"
  ): TypedContractEvent<
    CCIPSenderAuthorizedEvent.InputTuple,
    CCIPSenderAuthorizedEvent.OutputTuple,
    CCIPSenderAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralDataRecorded"
  ): TypedContractEvent<
    CollateralDataRecordedEvent.InputTuple,
    CollateralDataRecordedEvent.OutputTuple,
    CollateralDataRecordedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainReputationReceived"
  ): TypedContractEvent<
    CrossChainReputationReceivedEvent.InputTuple,
    CrossChainReputationReceivedEvent.OutputTuple,
    CrossChainReputationReceivedEvent.OutputObject
  >;
  getEvent(
    key: "FirstSeenRecorded"
  ): TypedContractEvent<
    FirstSeenRecordedEvent.InputTuple,
    FirstSeenRecordedEvent.OutputTuple,
    FirstSeenRecordedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceAuthorized"
  ): TypedContractEvent<
    GovernanceAuthorizedEvent.InputTuple,
    GovernanceAuthorizedEvent.OutputTuple,
    GovernanceAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "KYCVerified"
  ): TypedContractEvent<
    KYCVerifiedEvent.InputTuple,
    KYCVerifiedEvent.OutputTuple,
    KYCVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "LenderAuthorized"
  ): TypedContractEvent<
    LenderAuthorizedEvent.InputTuple,
    LenderAuthorizedEvent.OutputTuple,
    LenderAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationRegistered"
  ): TypedContractEvent<
    LiquidationRegisteredEvent.InputTuple,
    LiquidationRegisteredEvent.OutputTuple,
    LiquidationRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "LoanRegistered"
  ): TypedContractEvent<
    LoanRegisteredEvent.InputTuple,
    LoanRegisteredEvent.OutputTuple,
    LoanRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalRecorded"
  ): TypedContractEvent<
    ProposalRecordedEvent.InputTuple,
    ProposalRecordedEvent.OutputTuple,
    ProposalRecordedEvent.OutputObject
  >;
  getEvent(
    key: "RepaymentRegistered"
  ): TypedContractEvent<
    RepaymentRegisteredEvent.InputTuple,
    RepaymentRegisteredEvent.OutputTuple,
    RepaymentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "StakeDeposited"
  ): TypedContractEvent<
    StakeDepositedEvent.InputTuple,
    StakeDepositedEvent.OutputTuple,
    StakeDepositedEvent.OutputObject
  >;
  getEvent(
    key: "StakeWithdrawn"
  ): TypedContractEvent<
    StakeWithdrawnEvent.InputTuple,
    StakeWithdrawnEvent.OutputTuple,
    StakeWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VoteRecorded"
  ): TypedContractEvent<
    VoteRecordedEvent.InputTuple,
    VoteRecordedEvent.OutputTuple,
    VoteRecordedEvent.OutputObject
  >;

  filters: {
    "CCIPSenderAuthorized(address,bool)": TypedContractEvent<
      CCIPSenderAuthorizedEvent.InputTuple,
      CCIPSenderAuthorizedEvent.OutputTuple,
      CCIPSenderAuthorizedEvent.OutputObject
    >;
    CCIPSenderAuthorized: TypedContractEvent<
      CCIPSenderAuthorizedEvent.InputTuple,
      CCIPSenderAuthorizedEvent.OutputTuple,
      CCIPSenderAuthorizedEvent.OutputObject
    >;

    "CollateralDataRecorded(uint256,address,uint256,uint16)": TypedContractEvent<
      CollateralDataRecordedEvent.InputTuple,
      CollateralDataRecordedEvent.OutputTuple,
      CollateralDataRecordedEvent.OutputObject
    >;
    CollateralDataRecorded: TypedContractEvent<
      CollateralDataRecordedEvent.InputTuple,
      CollateralDataRecordedEvent.OutputTuple,
      CollateralDataRecordedEvent.OutputObject
    >;

    "CrossChainReputationReceived(address,uint64,uint16,uint256)": TypedContractEvent<
      CrossChainReputationReceivedEvent.InputTuple,
      CrossChainReputationReceivedEvent.OutputTuple,
      CrossChainReputationReceivedEvent.OutputObject
    >;
    CrossChainReputationReceived: TypedContractEvent<
      CrossChainReputationReceivedEvent.InputTuple,
      CrossChainReputationReceivedEvent.OutputTuple,
      CrossChainReputationReceivedEvent.OutputObject
    >;

    "FirstSeenRecorded(address,uint256)": TypedContractEvent<
      FirstSeenRecordedEvent.InputTuple,
      FirstSeenRecordedEvent.OutputTuple,
      FirstSeenRecordedEvent.OutputObject
    >;
    FirstSeenRecorded: TypedContractEvent<
      FirstSeenRecordedEvent.InputTuple,
      FirstSeenRecordedEvent.OutputTuple,
      FirstSeenRecordedEvent.OutputObject
    >;

    "GovernanceAuthorized(address,bool)": TypedContractEvent<
      GovernanceAuthorizedEvent.InputTuple,
      GovernanceAuthorizedEvent.OutputTuple,
      GovernanceAuthorizedEvent.OutputObject
    >;
    GovernanceAuthorized: TypedContractEvent<
      GovernanceAuthorizedEvent.InputTuple,
      GovernanceAuthorizedEvent.OutputTuple,
      GovernanceAuthorizedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "KYCVerified(address,bytes32,uint256)": TypedContractEvent<
      KYCVerifiedEvent.InputTuple,
      KYCVerifiedEvent.OutputTuple,
      KYCVerifiedEvent.OutputObject
    >;
    KYCVerified: TypedContractEvent<
      KYCVerifiedEvent.InputTuple,
      KYCVerifiedEvent.OutputTuple,
      KYCVerifiedEvent.OutputObject
    >;

    "LenderAuthorized(address,bool)": TypedContractEvent<
      LenderAuthorizedEvent.InputTuple,
      LenderAuthorizedEvent.OutputTuple,
      LenderAuthorizedEvent.OutputObject
    >;
    LenderAuthorized: TypedContractEvent<
      LenderAuthorizedEvent.InputTuple,
      LenderAuthorizedEvent.OutputTuple,
      LenderAuthorizedEvent.OutputObject
    >;

    "LiquidationRegistered(address,uint256,uint256,uint256,address)": TypedContractEvent<
      LiquidationRegisteredEvent.InputTuple,
      LiquidationRegisteredEvent.OutputTuple,
      LiquidationRegisteredEvent.OutputObject
    >;
    LiquidationRegistered: TypedContractEvent<
      LiquidationRegisteredEvent.InputTuple,
      LiquidationRegisteredEvent.OutputTuple,
      LiquidationRegisteredEvent.OutputObject
    >;

    "LoanRegistered(address,uint256,uint256,uint256,address)": TypedContractEvent<
      LoanRegisteredEvent.InputTuple,
      LoanRegisteredEvent.OutputTuple,
      LoanRegisteredEvent.OutputObject
    >;
    LoanRegistered: TypedContractEvent<
      LoanRegisteredEvent.InputTuple,
      LoanRegisteredEvent.OutputTuple,
      LoanRegisteredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalRecorded(address,uint256,uint256)": TypedContractEvent<
      ProposalRecordedEvent.InputTuple,
      ProposalRecordedEvent.OutputTuple,
      ProposalRecordedEvent.OutputObject
    >;
    ProposalRecorded: TypedContractEvent<
      ProposalRecordedEvent.InputTuple,
      ProposalRecordedEvent.OutputTuple,
      ProposalRecordedEvent.OutputObject
    >;

    "RepaymentRegistered(address,uint256,uint256,uint256,address)": TypedContractEvent<
      RepaymentRegisteredEvent.InputTuple,
      RepaymentRegisteredEvent.OutputTuple,
      RepaymentRegisteredEvent.OutputObject
    >;
    RepaymentRegistered: TypedContractEvent<
      RepaymentRegisteredEvent.InputTuple,
      RepaymentRegisteredEvent.OutputTuple,
      RepaymentRegisteredEvent.OutputObject
    >;

    "StakeDeposited(address,uint256,uint256)": TypedContractEvent<
      StakeDepositedEvent.InputTuple,
      StakeDepositedEvent.OutputTuple,
      StakeDepositedEvent.OutputObject
    >;
    StakeDeposited: TypedContractEvent<
      StakeDepositedEvent.InputTuple,
      StakeDepositedEvent.OutputTuple,
      StakeDepositedEvent.OutputObject
    >;

    "StakeWithdrawn(address,uint256)": TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;
    StakeWithdrawn: TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VoteRecorded(address,uint256,uint256)": TypedContractEvent<
      VoteRecordedEvent.InputTuple,
      VoteRecordedEvent.OutputTuple,
      VoteRecordedEvent.OutputObject
    >;
    VoteRecorded: TypedContractEvent<
      VoteRecordedEvent.InputTuple,
      VoteRecordedEvent.OutputTuple,
      VoteRecordedEvent.OutputObject
    >;
  };
}
