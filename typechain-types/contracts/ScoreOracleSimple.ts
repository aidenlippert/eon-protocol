/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ScoreOracleSimple {
  export type ScoreBreakdownStruct = {
    repayment: BigNumberish;
    collateral: BigNumberish;
    sybil: BigNumberish;
    crossChain: BigNumberish;
    participation: BigNumberish;
    overall: BigNumberish;
  };

  export type ScoreBreakdownStructOutput = [
    repayment: bigint,
    collateral: bigint,
    sybil: bigint,
    crossChain: bigint,
    participation: bigint,
    overall: bigint
  ] & {
    repayment: bigint;
    collateral: bigint;
    sybil: bigint;
    crossChain: bigint;
    participation: bigint;
    overall: bigint;
  };
}

export interface ScoreOracleSimpleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_SCORE"
      | "MIN_SCORE"
      | "baseAPR"
      | "computeScore"
      | "getAPR"
      | "maxAPR"
      | "minAPR"
      | "owner"
      | "registry"
      | "renounceOwnership"
      | "setAPRConfig"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "APRConfigUpdated" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_SCORE", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_SCORE", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseAPR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "computeScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAPR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxAPR", values?: undefined): string;
  encodeFunctionData(functionFragment: "minAPR", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAPRConfig",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_SCORE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_SCORE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseAPR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAPR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxAPR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minAPR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAPRConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace APRConfigUpdatedEvent {
  export type InputTuple = [
    baseAPR: BigNumberish,
    minAPR: BigNumberish,
    maxAPR: BigNumberish
  ];
  export type OutputTuple = [baseAPR: bigint, minAPR: bigint, maxAPR: bigint];
  export interface OutputObject {
    baseAPR: bigint;
    minAPR: bigint;
    maxAPR: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ScoreOracleSimple extends BaseContract {
  connect(runner?: ContractRunner | null): ScoreOracleSimple;
  waitForDeployment(): Promise<this>;

  interface: ScoreOracleSimpleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_SCORE: TypedContractMethod<[], [bigint], "view">;

  MIN_SCORE: TypedContractMethod<[], [bigint], "view">;

  baseAPR: TypedContractMethod<[], [bigint], "view">;

  computeScore: TypedContractMethod<
    [subject: AddressLike],
    [ScoreOracleSimple.ScoreBreakdownStructOutput],
    "view"
  >;

  getAPR: TypedContractMethod<[score: BigNumberish], [bigint], "view">;

  maxAPR: TypedContractMethod<[], [bigint], "view">;

  minAPR: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAPRConfig: TypedContractMethod<
    [_baseAPR: BigNumberish, _minAPR: BigNumberish, _maxAPR: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseAPR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "computeScore"
  ): TypedContractMethod<
    [subject: AddressLike],
    [ScoreOracleSimple.ScoreBreakdownStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAPR"
  ): TypedContractMethod<[score: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxAPR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minAPR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAPRConfig"
  ): TypedContractMethod<
    [_baseAPR: BigNumberish, _minAPR: BigNumberish, _maxAPR: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "APRConfigUpdated"
  ): TypedContractEvent<
    APRConfigUpdatedEvent.InputTuple,
    APRConfigUpdatedEvent.OutputTuple,
    APRConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "APRConfigUpdated(uint16,uint16,uint16)": TypedContractEvent<
      APRConfigUpdatedEvent.InputTuple,
      APRConfigUpdatedEvent.OutputTuple,
      APRConfigUpdatedEvent.OutputObject
    >;
    APRConfigUpdated: TypedContractEvent<
      APRConfigUpdatedEvent.InputTuple,
      APRConfigUpdatedEvent.OutputTuple,
      APRConfigUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
