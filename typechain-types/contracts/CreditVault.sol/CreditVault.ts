/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace CreditVault {
  export type LoanStruct = {
    borrower: AddressLike;
    principal: BigNumberish;
    collateralAmount: BigNumberish;
    collateralToken: AddressLike;
    aprBps: BigNumberish;
    startTimestamp: BigNumberish;
    active: boolean;
    graceStart: BigNumberish;
  };

  export type LoanStructOutput = [
    borrower: string,
    principal: bigint,
    collateralAmount: bigint,
    collateralToken: string,
    aprBps: bigint,
    startTimestamp: bigint,
    active: boolean,
    graceStart: bigint
  ] & {
    borrower: string;
    principal: bigint;
    collateralAmount: bigint;
    collateralToken: string;
    aprBps: bigint;
    startTimestamp: bigint;
    active: boolean;
    graceStart: bigint;
  };
}

export interface CreditVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "GRACE_BRONZE"
      | "GRACE_GOLD"
      | "GRACE_PLATINUM"
      | "GRACE_SILVER"
      | "INSURANCE_SHARE_BPS"
      | "LIQUIDATION_PENALTY_BPS"
      | "LIQUIDATOR_SHARE_BPS"
      | "LTV_BRONZE"
      | "LTV_GOLD"
      | "LTV_PLATINUM"
      | "LTV_SILVER"
      | "MIN_HEALTH_FACTOR"
      | "assets"
      | "borrow"
      | "calculateDebt"
      | "depositCollateral"
      | "getHealthFactor"
      | "getLoan"
      | "getUserHealthFactor"
      | "insurancePool"
      | "liquidate"
      | "loans"
      | "nextLoanId"
      | "oracle"
      | "owner"
      | "pause"
      | "paused"
      | "registry"
      | "renounceOwnership"
      | "repay"
      | "setAsset"
      | "setInsurancePool"
      | "setOracle"
      | "transferOwnership"
      | "unpause"
      | "userCollateral"
      | "withdrawCollateral"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetConfigured"
      | "CollateralDeposited"
      | "CollateralWithdrawn"
      | "GracePeriodStarted"
      | "InsurancePoolSet"
      | "LoanCreated"
      | "LoanLiquidated"
      | "LoanRepaid"
      | "OracleUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "GRACE_BRONZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRACE_GOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRACE_PLATINUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRACE_SILVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INSURANCE_SHARE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_PENALTY_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATOR_SHARE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LTV_BRONZE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LTV_GOLD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LTV_PLATINUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LTV_SILVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_HEALTH_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assets", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHealthFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserHealthFactor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "insurancePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nextLoanId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAsset",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setInsurancePool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userCollateral",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "GRACE_BRONZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GRACE_GOLD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GRACE_PLATINUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GRACE_SILVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INSURANCE_SHARE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_PENALTY_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATOR_SHARE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LTV_BRONZE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LTV_GOLD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LTV_PLATINUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LTV_SILVER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_HEALTH_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insurancePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextLoanId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInsurancePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
}

export namespace AssetConfiguredEvent {
  export type InputTuple = [
    token: AddressLike,
    priceFeed: AddressLike,
    allowed: boolean
  ];
  export type OutputTuple = [
    token: string,
    priceFeed: string,
    allowed: boolean
  ];
  export interface OutputObject {
    token: string;
    priceFeed: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralDepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    usdValue: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    token: string,
    amount: bigint,
    usdValue: bigint
  ];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
    usdValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralWithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    usdValue: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    token: string,
    amount: bigint,
    usdValue: bigint
  ];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
    usdValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GracePeriodStartedEvent {
  export type InputTuple = [loanId: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [loanId: bigint, timestamp: bigint];
  export interface OutputObject {
    loanId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InsurancePoolSetEvent {
  export type InputTuple = [pool: AddressLike];
  export type OutputTuple = [pool: string];
  export interface OutputObject {
    pool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanCreatedEvent {
  export type InputTuple = [
    loanId: BigNumberish,
    borrower: AddressLike,
    principal: BigNumberish,
    collateral: BigNumberish,
    collateralToken: AddressLike
  ];
  export type OutputTuple = [
    loanId: bigint,
    borrower: string,
    principal: bigint,
    collateral: bigint,
    collateralToken: string
  ];
  export interface OutputObject {
    loanId: bigint;
    borrower: string;
    principal: bigint;
    collateral: bigint;
    collateralToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanLiquidatedEvent {
  export type InputTuple = [
    loanId: BigNumberish,
    borrower: AddressLike,
    liquidator: AddressLike,
    collateralSeized: BigNumberish
  ];
  export type OutputTuple = [
    loanId: bigint,
    borrower: string,
    liquidator: string,
    collateralSeized: bigint
  ];
  export interface OutputObject {
    loanId: bigint;
    borrower: string;
    liquidator: string;
    collateralSeized: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanRepaidEvent {
  export type InputTuple = [
    loanId: BigNumberish,
    borrower: AddressLike,
    amount: BigNumberish,
    remaining: BigNumberish
  ];
  export type OutputTuple = [
    loanId: bigint,
    borrower: string,
    amount: bigint,
    remaining: bigint
  ];
  export interface OutputObject {
    loanId: bigint;
    borrower: string;
    amount: bigint;
    remaining: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleUpdatedEvent {
  export type InputTuple = [newOracle: AddressLike];
  export type OutputTuple = [newOracle: string];
  export interface OutputObject {
    newOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CreditVault extends BaseContract {
  connect(runner?: ContractRunner | null): CreditVault;
  waitForDeployment(): Promise<this>;

  interface: CreditVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GRACE_BRONZE: TypedContractMethod<[], [bigint], "view">;

  GRACE_GOLD: TypedContractMethod<[], [bigint], "view">;

  GRACE_PLATINUM: TypedContractMethod<[], [bigint], "view">;

  GRACE_SILVER: TypedContractMethod<[], [bigint], "view">;

  INSURANCE_SHARE_BPS: TypedContractMethod<[], [bigint], "view">;

  LIQUIDATION_PENALTY_BPS: TypedContractMethod<[], [bigint], "view">;

  LIQUIDATOR_SHARE_BPS: TypedContractMethod<[], [bigint], "view">;

  LTV_BRONZE: TypedContractMethod<[], [bigint], "view">;

  LTV_GOLD: TypedContractMethod<[], [bigint], "view">;

  LTV_PLATINUM: TypedContractMethod<[], [bigint], "view">;

  LTV_SILVER: TypedContractMethod<[], [bigint], "view">;

  MIN_HEALTH_FACTOR: TypedContractMethod<[], [bigint], "view">;

  assets: TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, string] & { allowed: boolean; priceFeed: string }],
    "view"
  >;

  borrow: TypedContractMethod<
    [
      collateralToken: AddressLike,
      collateralAmount: BigNumberish,
      principalUsd18: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  calculateDebt: TypedContractMethod<[loanId: BigNumberish], [bigint], "view">;

  depositCollateral: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getHealthFactor: TypedContractMethod<
    [loanId: BigNumberish],
    [bigint],
    "view"
  >;

  getLoan: TypedContractMethod<
    [loanId: BigNumberish],
    [CreditVault.LoanStructOutput],
    "view"
  >;

  getUserHealthFactor: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  insurancePool: TypedContractMethod<[], [string], "view">;

  liquidate: TypedContractMethod<[loanId: BigNumberish], [void], "nonpayable">;

  loans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, bigint, bigint, boolean, bigint] & {
        borrower: string;
        principal: bigint;
        collateralAmount: bigint;
        collateralToken: string;
        aprBps: bigint;
        startTimestamp: bigint;
        active: boolean;
        graceStart: bigint;
      }
    ],
    "view"
  >;

  nextLoanId: TypedContractMethod<[], [bigint], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repay: TypedContractMethod<
    [loanId: BigNumberish, amountUsd18: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAsset: TypedContractMethod<
    [token: AddressLike, priceFeed: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  setInsurancePool: TypedContractMethod<
    [_pool: AddressLike],
    [void],
    "nonpayable"
  >;

  setOracle: TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userCollateral: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawCollateral: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GRACE_BRONZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GRACE_GOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GRACE_PLATINUM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GRACE_SILVER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INSURANCE_SHARE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LIQUIDATION_PENALTY_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LIQUIDATOR_SHARE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LTV_BRONZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LTV_GOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LTV_PLATINUM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LTV_SILVER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_HEALTH_FACTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "assets"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, string] & { allowed: boolean; priceFeed: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [
      collateralToken: AddressLike,
      collateralAmount: BigNumberish,
      principalUsd18: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateDebt"
  ): TypedContractMethod<[loanId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositCollateral"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getHealthFactor"
  ): TypedContractMethod<[loanId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLoan"
  ): TypedContractMethod<
    [loanId: BigNumberish],
    [CreditVault.LoanStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserHealthFactor"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "insurancePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<[loanId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "loans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, bigint, bigint, boolean, bigint] & {
        borrower: string;
        principal: bigint;
        collateralAmount: bigint;
        collateralToken: string;
        aprBps: bigint;
        startTimestamp: bigint;
        active: boolean;
        graceStart: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextLoanId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [loanId: BigNumberish, amountUsd18: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAsset"
  ): TypedContractMethod<
    [token: AddressLike, priceFeed: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setInsurancePool"
  ): TypedContractMethod<[_pool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userCollateral"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawCollateral"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AssetConfigured"
  ): TypedContractEvent<
    AssetConfiguredEvent.InputTuple,
    AssetConfiguredEvent.OutputTuple,
    AssetConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "CollateralDeposited"
  ): TypedContractEvent<
    CollateralDepositedEvent.InputTuple,
    CollateralDepositedEvent.OutputTuple,
    CollateralDepositedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralWithdrawn"
  ): TypedContractEvent<
    CollateralWithdrawnEvent.InputTuple,
    CollateralWithdrawnEvent.OutputTuple,
    CollateralWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "GracePeriodStarted"
  ): TypedContractEvent<
    GracePeriodStartedEvent.InputTuple,
    GracePeriodStartedEvent.OutputTuple,
    GracePeriodStartedEvent.OutputObject
  >;
  getEvent(
    key: "InsurancePoolSet"
  ): TypedContractEvent<
    InsurancePoolSetEvent.InputTuple,
    InsurancePoolSetEvent.OutputTuple,
    InsurancePoolSetEvent.OutputObject
  >;
  getEvent(
    key: "LoanCreated"
  ): TypedContractEvent<
    LoanCreatedEvent.InputTuple,
    LoanCreatedEvent.OutputTuple,
    LoanCreatedEvent.OutputObject
  >;
  getEvent(
    key: "LoanLiquidated"
  ): TypedContractEvent<
    LoanLiquidatedEvent.InputTuple,
    LoanLiquidatedEvent.OutputTuple,
    LoanLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "LoanRepaid"
  ): TypedContractEvent<
    LoanRepaidEvent.InputTuple,
    LoanRepaidEvent.OutputTuple,
    LoanRepaidEvent.OutputObject
  >;
  getEvent(
    key: "OracleUpdated"
  ): TypedContractEvent<
    OracleUpdatedEvent.InputTuple,
    OracleUpdatedEvent.OutputTuple,
    OracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AssetConfigured(address,address,bool)": TypedContractEvent<
      AssetConfiguredEvent.InputTuple,
      AssetConfiguredEvent.OutputTuple,
      AssetConfiguredEvent.OutputObject
    >;
    AssetConfigured: TypedContractEvent<
      AssetConfiguredEvent.InputTuple,
      AssetConfiguredEvent.OutputTuple,
      AssetConfiguredEvent.OutputObject
    >;

    "CollateralDeposited(address,address,uint256,uint256)": TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;
    CollateralDeposited: TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;

    "CollateralWithdrawn(address,address,uint256,uint256)": TypedContractEvent<
      CollateralWithdrawnEvent.InputTuple,
      CollateralWithdrawnEvent.OutputTuple,
      CollateralWithdrawnEvent.OutputObject
    >;
    CollateralWithdrawn: TypedContractEvent<
      CollateralWithdrawnEvent.InputTuple,
      CollateralWithdrawnEvent.OutputTuple,
      CollateralWithdrawnEvent.OutputObject
    >;

    "GracePeriodStarted(uint256,uint256)": TypedContractEvent<
      GracePeriodStartedEvent.InputTuple,
      GracePeriodStartedEvent.OutputTuple,
      GracePeriodStartedEvent.OutputObject
    >;
    GracePeriodStarted: TypedContractEvent<
      GracePeriodStartedEvent.InputTuple,
      GracePeriodStartedEvent.OutputTuple,
      GracePeriodStartedEvent.OutputObject
    >;

    "InsurancePoolSet(address)": TypedContractEvent<
      InsurancePoolSetEvent.InputTuple,
      InsurancePoolSetEvent.OutputTuple,
      InsurancePoolSetEvent.OutputObject
    >;
    InsurancePoolSet: TypedContractEvent<
      InsurancePoolSetEvent.InputTuple,
      InsurancePoolSetEvent.OutputTuple,
      InsurancePoolSetEvent.OutputObject
    >;

    "LoanCreated(uint256,address,uint256,uint256,address)": TypedContractEvent<
      LoanCreatedEvent.InputTuple,
      LoanCreatedEvent.OutputTuple,
      LoanCreatedEvent.OutputObject
    >;
    LoanCreated: TypedContractEvent<
      LoanCreatedEvent.InputTuple,
      LoanCreatedEvent.OutputTuple,
      LoanCreatedEvent.OutputObject
    >;

    "LoanLiquidated(uint256,address,address,uint256)": TypedContractEvent<
      LoanLiquidatedEvent.InputTuple,
      LoanLiquidatedEvent.OutputTuple,
      LoanLiquidatedEvent.OutputObject
    >;
    LoanLiquidated: TypedContractEvent<
      LoanLiquidatedEvent.InputTuple,
      LoanLiquidatedEvent.OutputTuple,
      LoanLiquidatedEvent.OutputObject
    >;

    "LoanRepaid(uint256,address,uint256,uint256)": TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;
    LoanRepaid: TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;

    "OracleUpdated(address)": TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;
    OracleUpdated: TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
