{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:14",
        "version": {
          "withMetadata": "782263662a2451e36708955f6a5897d207cafb58296e055835df5b093b6dda6d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "8190e009429abc9112af0fbdaaee3f41acf4b7cdfb1909858f64f03edacd6a04",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "ac60057525ad69f9391e3657a9d03d9ab78f30aa357c7eb350a7ffdfe3b8346f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ScoreAttestor.sol:IEAS": {
        "src": "contracts/ScoreAttestor.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "getAttestation(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ScoreAttestor.sol:ScoreAttestor": {
        "src": "contracts/ScoreAttestor.sol:56",
        "version": {
          "withMetadata": "8bdd14d4ac27caf11785d6f9be91af11aaec3cee9e113c7c88e6c677325b656d",
          "withoutMetadata": "232f9bac27092f009588548e922d9970c12f85554d274da172c7ccc8639d428e",
          "linkedWithoutMetadata": "232f9bac27092f009588548e922d9970c12f85554d274da172c7ccc8639d428e"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,bytes32,address)",
          "attestScore(address,uint256,string)",
          "getLatestAttestation(address)",
          "getAttestationHistory(address)",
          "verifyAttestation(bytes32)",
          "decodeAttestation(bytes32)",
          "updateSchema(bytes32)",
          "updateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)1396",
              "contract": "ScoreAttestor",
              "src": "contracts/ScoreAttestor.sol:60"
            },
            {
              "label": "creditScoreSchema",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "ScoreAttestor",
              "src": "contracts/ScoreAttestor.sol:63"
            },
            {
              "label": "scoreOracle",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ScoreAttestor",
              "src": "contracts/ScoreAttestor.sol:66"
            },
            {
              "label": "latestAttestation",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "ScoreAttestor",
              "src": "contracts/ScoreAttestor.sol:69"
            },
            {
              "label": "attestationHistory",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "ScoreAttestor",
              "src": "contracts/ScoreAttestor.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IEAS)1396": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)253_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)330_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:14",
        "version": {
          "withMetadata": "782263662a2451e36708955f6a5897d207cafb58296e055835df5b093b6dda6d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "7784cb36ab578863fcb8457447d643d9d64101a1b57f52b4ee8e1447fcb7ebac",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "8190e009429abc9112af0fbdaaee3f41acf4b7cdfb1909858f64f03edacd6a04",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/utils/Pausable.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "ac60057525ad69f9391e3657a9d03d9ab78f30aa357c7eb350a7ffdfe3b8346f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "6f7655e40755445179673bbf265f05e3ab8ffd5e54bae8e2f10a54287769e1aa",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:12",
        "version": {
          "withMetadata": "727cd8b5422724cadb65b28886ea73094deedc43a2e4f9fe46dc09e6fcdfcd02",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "caf4524b868fadd2fdf14e11c0bc748cfc06b4b2292af3f45839ce921b873107",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "83eac02b4fd33686ed3262811f2134872ae3f6b18bd5278dd4d7e6136953a79b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f36fb3d7b7eddd9718875df41cb6ac0e8ff9758bc28ccfacd73109fc150ff07e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "a353038069828fa44f2321eee39d1501f381af4dd62af465aa97dbd8af7602fc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ChainlinkPriceOracle.sol:AggregatorV3Interface": {
        "src": "contracts/ChainlinkPriceOracle.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ChainlinkPriceOracle.sol:ChainlinkPriceOracle": {
        "src": "contracts/ChainlinkPriceOracle.sol:37",
        "version": {
          "withMetadata": "393e54022852772ec012a855718fe6adcb40e1bc5afddf64f8e4cd20ce36ee84",
          "withoutMetadata": "841550d9aa3cd9e24dd1fce06b958a695d9d7aa7f556a8e88e3e08028d206f98",
          "linkedWithoutMetadata": "841550d9aa3cd9e24dd1fce06b958a695d9d7aa7f556a8e88e3e08028d206f98"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "getPrice(address)",
          "getPriceWithFallback(address)",
          "getPrices(address[])",
          "tokenToUsd(address,uint256)",
          "usdToToken(address,uint256)",
          "setPriceFeed(address,address,uint32)",
          "deactivatePriceFeed(address)",
          "activatePriceFeed(address)",
          "setFallbackOracle(address)",
          "setMaxDeviationBps(uint16)",
          "setEmergencyPause(bool)",
          "isPriceFeedActive(address)",
          "getPriceFeedConfig(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ChainlinkPriceOracle",
            "src": "contracts/ChainlinkPriceOracle.sol:80"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxDeviationBps",
            "src": "contracts/ChainlinkPriceOracle.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "priceFeeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(PriceFeedConfig)5515_storage)",
              "contract": "ChainlinkPriceOracle",
              "src": "contracts/ChainlinkPriceOracle.sol:51"
            },
            {
              "label": "fallbackOracle",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ChainlinkPriceOracle",
              "src": "contracts/ChainlinkPriceOracle.sol:54"
            },
            {
              "label": "maxDeviationBps",
              "offset": 20,
              "slot": "2",
              "type": "t_uint16",
              "contract": "ChainlinkPriceOracle",
              "src": "contracts/ChainlinkPriceOracle.sol:57"
            },
            {
              "label": "emergencyPaused",
              "offset": 22,
              "slot": "2",
              "type": "t_bool",
              "contract": "ChainlinkPriceOracle",
              "src": "contracts/ChainlinkPriceOracle.sol:60"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(PriceFeedConfig)5515_storage)": {
              "label": "mapping(address => struct ChainlinkPriceOracle.PriceFeedConfig)",
              "numberOfBytes": "32"
            },
            "t_struct(PriceFeedConfig)5515_storage": {
              "label": "struct ChainlinkPriceOracle.PriceFeedConfig",
              "members": [
                {
                  "label": "feed",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "heartbeat",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 24,
                  "slot": "0"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 25,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/CreditRegistryV1_1.sol:CreditRegistryV1_1": {
        "src": "contracts/CreditRegistryV1_1.sol:25",
        "version": {
          "withMetadata": "f610e2477955ab88846840c3db36e590b4f28df2da90b77f06af2b14cc6fff97",
          "withoutMetadata": "63924f4c0c0d92b96d11d9e7987d71ceb4a6d5b8ca68c42a669ecf4d1b5c82bf",
          "linkedWithoutMetadata": "63924f4c0c0d92b96d11d9e7987d71ceb4a6d5b8ca68c42a669ecf4d1b5c82bf"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "(address)",
          "attestScore(address,uint16,uint8,uint8,uint16,uint8,bytes32)",
          "challengeScore(address,uint8)",
          "resolveChallenge(address,uint16,uint8,uint8,uint16,uint8,bytes32[])",
          "finalizeScore(address,uint16,uint8,uint8,uint16,uint8)",
          "getScore(address)",
          "hasValidScore(address,uint256)",
          "setAuthorizedAttester(address,bool)",
          "setChallengePeriod(uint256)",
          "setChallengeBond(uint256)",
          "setTreasury(address)",
          "emergencyWithdraw()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CreditRegistryV1_1",
            "src": "contracts/CreditRegistryV1_1.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "challengePeriod",
            "src": "contracts/CreditRegistryV1_1.sol:96"
          },
          {
            "kind": "state-variable-assignment",
            "name": "challengeBond",
            "src": "contracts/CreditRegistryV1_1.sol:99"
          },
          {
            "kind": "state-variable-assignment",
            "name": "challengeRewardBps",
            "src": "contracts/CreditRegistryV1_1.sol:102"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "scores",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(CreditScore)6188_storage)",
              "contract": "CreditRegistryV1_1",
              "src": "contracts/CreditRegistryV1_1.sol:84"
            },
            {
              "label": "pendingAttestations",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(ScoreAttestation)6204_storage)",
              "contract": "CreditRegistryV1_1",
              "src": "contracts/CreditRegistryV1_1.sol:87"
            },
            {
              "label": "challenges",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Challenge)6216_storage)",
              "contract": "CreditRegistryV1_1",
              "src": "contracts/CreditRegistryV1_1.sol:90"
            },
            {
              "label": "authorizedAttesters",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CreditRegistryV1_1",
              "src": "contracts/CreditRegistryV1_1.sol:93"
            },
            {
              "label": "challengePeriod",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "CreditRegistryV1_1",
              "src": "contracts/CreditRegistryV1_1.sol:96"
            },
            {
              "label": "challengeBond",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "CreditRegistryV1_1",
              "src": "contracts/CreditRegistryV1_1.sol:99"
            },
            {
              "label": "challengeRewardBps",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "CreditRegistryV1_1",
              "src": "contracts/CreditRegistryV1_1.sol:102"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "CreditRegistryV1_1",
              "src": "contracts/CreditRegistryV1_1.sol:105"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Challenge)6216_storage)": {
              "label": "mapping(address => struct CreditRegistryV1_1.Challenge)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(CreditScore)6188_storage)": {
              "label": "mapping(address => struct CreditRegistryV1_1.CreditScore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(ScoreAttestation)6204_storage)": {
              "label": "mapping(address => struct CreditRegistryV1_1.ScoreAttestation)",
              "numberOfBytes": "32"
            },
            "t_struct(Challenge)6216_storage": {
              "label": "struct CreditRegistryV1_1.Challenge",
              "members": [
                {
                  "label": "challenger",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "bond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "reason",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "resolved",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "successful",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(CreditScore)6188_storage": {
              "label": "struct CreditRegistryV1_1.CreditScore",
              "members": [
                {
                  "label": "score",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tier",
                  "type": "t_uint8",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "ltv",
                  "type": "t_uint8",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "interestRateMultiplier",
                  "type": "t_uint16",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint64",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "dataQuality",
                  "type": "t_uint8",
                  "offset": 14,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ScoreAttestation)6204_storage": {
              "label": "struct CreditRegistryV1_1.ScoreAttestation",
              "members": [
                {
                  "label": "scoreHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "attester",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "challengeDeadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "challenged",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "3"
                },
                {
                  "label": "finalized",
                  "type": "t_bool",
                  "offset": 9,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/CreditRegistryV2.sol:CreditRegistryV2": {
        "src": "contracts/CreditRegistryV2.sol:23",
        "version": {
          "withMetadata": "79bb6f5d8b92f27ec0f0cf174232580ecea1ecb5c240659833b4b90f8a766e6e",
          "withoutMetadata": "4667e932f9c48184a6313ad530ed1240dc9924f89bd9074e0fb3dde6e2324f6c",
          "linkedWithoutMetadata": "4667e932f9c48184a6313ad530ed1240dc9924f89bd9074e0fb3dde6e2324f6c"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA",
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "(address)",
          "setStakingToken(address)",
          "setAuthorizedLender(address,bool)",
          "setAuthorizedAttester(address,bool)",
          "setFirstSeen(address,uint256)",
          "registerLoan(address,uint256)",
          "registerRepayment(uint256,uint256)",
          "registerLiquidation(uint256,uint256)",
          "getLoan(uint256)",
          "getLoanIdsByBorrower(address)",
          "getLoansByBorrower(address)",
          "getActiveLoanCount(address)",
          "postAttestation(bytes32,address,uint256,bytes)",
          "getAttestation(bytes32)",
          "depositStake(uint256,uint256)",
          "withdrawStake(uint256)",
          "linkWallets(address,address[],bytes[],uint256)",
          "getWalletBundle(address)",
          "getFirstSeen(address)",
          "recordFirstSeen()",
          "getWalletAge(address)",
          "getStakeInfo(address)",
          "rescueERC20(address,address,uint256)",
          "rescueETH(address payable,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CreditRegistryV2",
            "src": "contracts/CreditRegistryV2.sol:111"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextLoanId",
            "src": "contracts/CreditRegistryV2.sol:78"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "_loansById",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_struct(LoanRecord)7208_storage)",
              "contract": "CreditRegistryV2",
              "src": "contracts/CreditRegistryV2.sol:72"
            },
            {
              "label": "_loanIdsByBorrower",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "CreditRegistryV2",
              "src": "contracts/CreditRegistryV2.sol:75"
            },
            {
              "label": "_nextLoanId",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "CreditRegistryV2",
              "src": "contracts/CreditRegistryV2.sol:78"
            },
            {
              "label": "_attestations",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_struct(Attestation)7219_storage)",
              "contract": "CreditRegistryV2",
              "src": "contracts/CreditRegistryV2.sol:81"
            },
            {
              "label": "authorizedLenders",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CreditRegistryV2",
              "src": "contracts/CreditRegistryV2.sol:84"
            },
            {
              "label": "authorizedAttesters",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CreditRegistryV2",
              "src": "contracts/CreditRegistryV2.sol:85"
            },
            {
              "label": "walletFirstSeen",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "CreditRegistryV2",
              "src": "contracts/CreditRegistryV2.sol:88"
            },
            {
              "label": "walletBundles",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "CreditRegistryV2",
              "src": "contracts/CreditRegistryV2.sol:91"
            },
            {
              "label": "stakes",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(StakeInfo)7224_storage)",
              "contract": "CreditRegistryV2",
              "src": "contracts/CreditRegistryV2.sol:94"
            },
            {
              "label": "stakingToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)2174",
              "contract": "CreditRegistryV2",
              "src": "contracts/CreditRegistryV2.sol:95"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2174": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_enum(LoanStatus)7192": {
              "label": "enum CreditRegistryV2.LoanStatus",
              "members": [
                "Unknown",
                "Active",
                "Repaid",
                "Liquidated"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(StakeInfo)7224_storage)": {
              "label": "mapping(address => struct CreditRegistryV2.StakeInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Attestation)7219_storage)": {
              "label": "mapping(bytes32 => struct CreditRegistryV2.Attestation)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(LoanRecord)7208_storage)": {
              "label": "mapping(uint256 => struct CreditRegistryV2.LoanRecord)",
              "numberOfBytes": "32"
            },
            "t_struct(Attestation)7219_storage": {
              "label": "struct CreditRegistryV2.Attestation",
              "members": [
                {
                  "label": "attestationHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "subject",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "issuer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "signature",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(LoanRecord)7208_storage": {
              "label": "struct CreditRegistryV2.LoanRecord",
              "members": [
                {
                  "label": "loanId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "borrower",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "principalUsd18",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "repaidUsd18",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "status",
                  "type": "t_enum(LoanStatus)7192",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "lender",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(StakeInfo)7224_storage": {
              "label": "struct CreditRegistryV2.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lockUntil",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/CreditRegistryV3.sol:CreditRegistryV3": {
        "src": "contracts/CreditRegistryV3.sol:21",
        "version": {
          "withMetadata": "ea711537a157b9ca69b2b681293f5d375d96814b65903366ac6ab92127171ca7",
          "withoutMetadata": "986bf6eb28dbad69853f3f7c01e94304e8723c6da06220b420dda9257f0a2cbb",
          "linkedWithoutMetadata": "986bf6eb28dbad69853f3f7c01e94304e8723c6da06220b420dda9257f0a2cbb"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA",
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "(address,address)",
          "registerLoan(address,uint256)",
          "registerRepayment(uint256,uint256)",
          "registerLiquidation(uint256,uint256)",
          "recordCollateralData(uint256,address,uint256,uint16)",
          "submitKYCProof(bytes32,uint256,bytes)",
          "setKYCIssuer(address)",
          "stake(uint256)",
          "unstake(uint256)",
          "receiveCrossChainReputation(address,uint64,uint16,uint256,uint256)",
          "recordVote(address,uint256)",
          "recordProposal(address,uint256)",
          "setAuthorizedLender(address,bool)",
          "setAuthorizedCCIPSender(address,bool)",
          "setAuthorizedGovernance(address,bool)",
          "getAggregateCreditData(address)",
          "getLoan(uint256)",
          "getLoanIdsByBorrower(address)",
          "getFirstSeen(address)",
          "getStakeInfo(address)",
          "getCollateralData(uint256)",
          "getUserCollateralAssets(address)",
          "getKYCProof(address)",
          "isKYCVerified(address)",
          "getCrossChainScore(address,uint64)",
          "getGovernanceActivity(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CreditRegistryV3",
            "src": "contracts/CreditRegistryV3.sol:173"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextLoanId",
            "src": "contracts/CreditRegistryV3.sol:133"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "aggregateCreditData",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(AggregateCreditData)8501_storage)",
              "contract": "CreditRegistryV3",
              "src": "contracts/CreditRegistryV3.sol:128"
            },
            {
              "label": "_loansById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(LoanRecord)8478_storage)",
              "contract": "CreditRegistryV3",
              "src": "contracts/CreditRegistryV3.sol:131"
            },
            {
              "label": "_loanIdsByBorrower",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "CreditRegistryV3",
              "src": "contracts/CreditRegistryV3.sol:132"
            },
            {
              "label": "_nextLoanId",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "CreditRegistryV3",
              "src": "contracts/CreditRegistryV3.sol:133"
            },
            {
              "label": "loanCollateralData",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(CollateralData)8510_storage)",
              "contract": "CreditRegistryV3",
              "src": "contracts/CreditRegistryV3.sol:136"
            },
            {
              "label": "_userCollateralAssets",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "CreditRegistryV3",
              "src": "contracts/CreditRegistryV3.sol:137"
            },
            {
              "label": "stakingToken",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(IERC20)2174",
              "contract": "CreditRegistryV3",
              "src": "contracts/CreditRegistryV3.sol:140"
            },
            {
              "label": "kycIssuer",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "CreditRegistryV3",
              "src": "contracts/CreditRegistryV3.sol:141"
            },
            {
              "label": "crossChainScores",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_uint64,t_struct(CrossChainScore)8531_storage))",
              "contract": "CreditRegistryV3",
              "src": "contracts/CreditRegistryV3.sol:144"
            },
            {
              "label": "governanceActivity",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_struct(GovernanceActivity)8540_storage)",
              "contract": "CreditRegistryV3",
              "src": "contracts/CreditRegistryV3.sol:147"
            },
            {
              "label": "authorizedLenders",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CreditRegistryV3",
              "src": "contracts/CreditRegistryV3.sol:150"
            },
            {
              "label": "authorizedCCIPSenders",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CreditRegistryV3",
              "src": "contracts/CreditRegistryV3.sol:151"
            },
            {
              "label": "authorizedGovernance",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CreditRegistryV3",
              "src": "contracts/CreditRegistryV3.sol:152"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)2174": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_enum(LoanStatus)8462": {
              "label": "enum CreditRegistryV3.LoanStatus",
              "members": [
                "Unknown",
                "Active",
                "Repaid",
                "Liquidated"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint64,t_struct(CrossChainScore)8531_storage))": {
              "label": "mapping(address => mapping(uint64 => struct CreditRegistryV3.CrossChainScore))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(AggregateCreditData)8501_storage)": {
              "label": "mapping(address => struct CreditRegistryV3.AggregateCreditData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(GovernanceActivity)8540_storage)": {
              "label": "mapping(address => struct CreditRegistryV3.GovernanceActivity)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(CollateralData)8510_storage)": {
              "label": "mapping(uint256 => struct CreditRegistryV3.CollateralData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(LoanRecord)8478_storage)": {
              "label": "mapping(uint256 => struct CreditRegistryV3.LoanRecord)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(CrossChainScore)8531_storage)": {
              "label": "mapping(uint64 => struct CreditRegistryV3.CrossChainScore)",
              "numberOfBytes": "32"
            },
            "t_struct(AggregateCreditData)8501_storage": {
              "label": "struct CreditRegistryV3.AggregateCreditData",
              "members": [
                {
                  "label": "totalLoans",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "repaidLoans",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "liquidatedLoans",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "activeLoans",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalCollateralUsd18",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "totalBorrowedUsd18",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "maxLtvBorrowCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "firstSeen",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "kyc",
                  "type": "t_struct(KYCProof)8517_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "stake",
                  "type": "t_struct(StakeInfo)8522_storage",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "416"
            },
            "t_struct(CollateralData)8510_storage": {
              "label": "struct CreditRegistryV3.CollateralData",
              "members": [
                {
                  "label": "collateralToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collateralValueUsd18",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "principalUsd18",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "userScoreAtBorrow",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(CrossChainScore)8531_storage": {
              "label": "struct CreditRegistryV3.CrossChainScore",
              "members": [
                {
                  "label": "overallScore",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalLoans",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "repaidLoans",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "updatedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(GovernanceActivity)8540_storage": {
              "label": "struct CreditRegistryV3.GovernanceActivity",
              "members": [
                {
                  "label": "voteCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposalCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastVoteTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastProposalTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(KYCProof)8517_storage": {
              "label": "struct CreditRegistryV3.KYCProof",
              "members": [
                {
                  "label": "credentialHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "verifiedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "expiresAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(LoanRecord)8478_storage": {
              "label": "struct CreditRegistryV3.LoanRecord",
              "members": [
                {
                  "label": "loanId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "borrower",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "principalUsd18",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "repaidUsd18",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "status",
                  "type": "t_enum(LoanStatus)8462",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "lender",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(StakeInfo)8522_storage": {
              "label": "struct CreditRegistryV3.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lockUntil",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/CreditVault.sol:CreditVault": {
        "src": "contracts/CreditVault.sol:19",
        "version": {
          "withMetadata": "6faf1aa7ee12c342ffcfa0dac62670607c88f5df893f68efee49aa63e4ba81a8",
          "withoutMetadata": "f6029af59a513e3003a3eb2779cc01767d779dc34329e1b1c392de254c855342",
          "linkedWithoutMetadata": "f6029af59a513e3003a3eb2779cc01767d779dc34329e1b1c392de254c855342"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address payable,address)",
          "setOracle(address)",
          "setAsset(address,address,bool)",
          "setInsurancePool(address)",
          "pause()",
          "unpause()",
          "depositCollateral(address,uint256)",
          "withdrawCollateral(address,uint256)",
          "borrow(address,uint256,uint256)",
          "repay(uint256,uint256)",
          "liquidate(uint256)",
          "getLoan(uint256)",
          "calculateDebt(uint256)",
          "getHealthFactor(uint256)",
          "getUserHealthFactor(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CreditVault",
            "src": "contracts/CreditVault.sol:84"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/CreditVault.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "oracle",
              "offset": 1,
              "slot": "2",
              "type": "t_contract(ScoreOracleSimple)19275",
              "contract": "CreditVault",
              "src": "contracts/CreditVault.sol:25"
            },
            {
              "label": "loans",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(Loan)9716_storage)",
              "contract": "CreditVault",
              "src": "contracts/CreditVault.sol:63"
            },
            {
              "label": "assets",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(AssetConfig)9721_storage)",
              "contract": "CreditVault",
              "src": "contracts/CreditVault.sol:64"
            },
            {
              "label": "userCollateral",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "CreditVault",
              "src": "contracts/CreditVault.sol:65"
            },
            {
              "label": "insurancePool",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "CreditVault",
              "src": "contracts/CreditVault.sol:67"
            },
            {
              "label": "nextLoanId",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "CreditVault",
              "src": "contracts/CreditVault.sol:68"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ScoreOracleSimple)19275": {
              "label": "contract ScoreOracleSimple",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(AssetConfig)9721_storage)": {
              "label": "mapping(address => struct CreditVault.AssetConfig)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Loan)9716_storage)": {
              "label": "mapping(uint256 => struct CreditVault.Loan)",
              "numberOfBytes": "32"
            },
            "t_struct(AssetConfig)9721_storage": {
              "label": "struct CreditVault.AssetConfig",
              "members": [
                {
                  "label": "allowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "priceFeed",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Loan)9716_storage": {
              "label": "struct CreditVault.Loan",
              "members": [
                {
                  "label": "borrower",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "principal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "collateralAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "collateralToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "aprBps",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "graceStart",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/CreditVault.sol:IERC20Metadata": {
        "src": "contracts/CreditVault.sol:392",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/CreditVaultV2.sol:CreditVaultV2": {
        "src": "contracts/CreditVaultV2.sol:30",
        "version": {
          "withMetadata": "b422febbe408a4803eed7713b66ab3271f693cf403c895528ced43085cbae80f",
          "withoutMetadata": "c2c072b3255360a4478bd00967219e2c5cbb83fc970acdaafb5f405faca2cbc7",
          "linkedWithoutMetadata": "c2c072b3255360a4478bd00967219e2c5cbb83fc970acdaafb5f405faca2cbc7"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address payable,address)",
          "setOracle(address)",
          "setAsset(address,address,bool)",
          "setInsurancePool(address)",
          "pause()",
          "unpause()",
          "depositCollateral(address,uint256)",
          "withdrawCollateral(address,uint256)",
          "borrow(address,uint256,uint256)",
          "repay(uint256,uint256)",
          "liquidate(uint256)",
          "getVaultLoanData(uint256)",
          "calculateDebt(uint256)",
          "getHealthFactor(uint256)",
          "getUserHealthFactor(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CreditVaultV2",
            "src": "contracts/CreditVaultV2.sol:101"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/CreditVaultV2.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "oracle",
              "offset": 1,
              "slot": "2",
              "type": "t_contract(ScoreOraclePhase3)17879",
              "contract": "CreditVaultV2",
              "src": "contracts/CreditVaultV2.sol:36"
            },
            {
              "label": "vaultLoans",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(VaultLoanData)11006_storage)",
              "contract": "CreditVaultV2",
              "src": "contracts/CreditVaultV2.sol:77"
            },
            {
              "label": "assets",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(AssetConfig)11011_storage)",
              "contract": "CreditVaultV2",
              "src": "contracts/CreditVaultV2.sol:80"
            },
            {
              "label": "userCollateral",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "CreditVaultV2",
              "src": "contracts/CreditVaultV2.sol:83"
            },
            {
              "label": "insurancePool",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "CreditVaultV2",
              "src": "contracts/CreditVaultV2.sol:85"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ScoreOraclePhase3)17879": {
              "label": "contract ScoreOraclePhase3",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(AssetConfig)11011_storage)": {
              "label": "mapping(address => struct CreditVaultV2.AssetConfig)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(VaultLoanData)11006_storage)": {
              "label": "mapping(uint256 => struct CreditVaultV2.VaultLoanData)",
              "numberOfBytes": "32"
            },
            "t_struct(AssetConfig)11011_storage": {
              "label": "struct CreditVaultV2.AssetConfig",
              "members": [
                {
                  "label": "allowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "priceFeed",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(VaultLoanData)11006_storage": {
              "label": "struct CreditVaultV2.VaultLoanData",
              "members": [
                {
                  "label": "collateralToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collateralAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "aprBps",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "startTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "graceStart",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "exists",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/CreditVaultV2.sol:IERC20Metadata": {
        "src": "contracts/CreditVaultV2.sol:437",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/CreditVaultV3.sol:CreditVaultV3": {
        "src": "contracts/CreditVaultV3.sol:18",
        "version": {
          "withMetadata": "d2b38d67d0796eaab82a5efd5f835bbcf4288ebef5340726aece9d20c84c4c93",
          "withoutMetadata": "7d9d458b34dd092d105f383e1e38ef4bf65986c2ccc65c9be847324a3b5f38a5",
          "linkedWithoutMetadata": "7d9d458b34dd092d105f383e1e38ef4bf65986c2ccc65c9be847324a3b5f38a5"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address payable,address,address)",
          "borrow(address,uint256,uint256)",
          "repay(uint256,uint256)",
          "liquidate(uint256)",
          "calculateDebt(uint256)",
          "setAsset(address,address,bool)",
          "setInsurancePool(address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CreditVaultV3",
            "src": "contracts/CreditVaultV3.sol:65"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "registry",
              "offset": 1,
              "slot": "2",
              "type": "t_contract(CreditRegistryV3)9636",
              "contract": "CreditVaultV3",
              "src": "contracts/CreditVaultV3.sol:39"
            },
            {
              "label": "oracle",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ScoreOraclePhase3B)19035",
              "contract": "CreditVaultV3",
              "src": "contracts/CreditVaultV3.sol:40"
            },
            {
              "label": "priceOracle",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(ChainlinkPriceOracle)6164",
              "contract": "CreditVaultV3",
              "src": "contracts/CreditVaultV3.sol:41"
            },
            {
              "label": "assets",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Asset)12402_storage)",
              "contract": "CreditVaultV3",
              "src": "contracts/CreditVaultV3.sol:43"
            },
            {
              "label": "vaultLoans",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(VaultLoanData)12397_storage)",
              "contract": "CreditVaultV3",
              "src": "contracts/CreditVaultV3.sol:44"
            },
            {
              "label": "insurancePool",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "CreditVaultV3",
              "src": "contracts/CreditVaultV3.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ChainlinkPriceOracle)6164": {
              "label": "contract ChainlinkPriceOracle",
              "numberOfBytes": "20"
            },
            "t_contract(CreditRegistryV3)9636": {
              "label": "contract CreditRegistryV3",
              "numberOfBytes": "20"
            },
            "t_contract(ScoreOraclePhase3B)19035": {
              "label": "contract ScoreOraclePhase3B",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Asset)12402_storage)": {
              "label": "mapping(address => struct CreditVaultV3.Asset)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(VaultLoanData)12397_storage)": {
              "label": "mapping(uint256 => struct CreditVaultV3.VaultLoanData)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)12402_storage": {
              "label": "struct CreditVaultV3.Asset",
              "members": [
                {
                  "label": "allowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "priceFeed",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(VaultLoanData)12397_storage": {
              "label": "struct CreditVaultV3.VaultLoanData",
              "members": [
                {
                  "label": "collateralToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collateralAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "aprBps",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "startTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "graceStart",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "exists",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/DutchAuctionLiquidator.sol:DutchAuctionLiquidator": {
        "src": "contracts/DutchAuctionLiquidator.sol:38",
        "version": {
          "withMetadata": "e11b9e86b314b6c4037ca1435bcd717aae1b8075260d708a2ebada8c4d0f4804",
          "withoutMetadata": "3ede9bdfaf4bec8928e4a3b186a0ba92ec62eb779754330584a7f6619e3bbe66",
          "linkedWithoutMetadata": "3ede9bdfaf4bec8928e4a3b186a0ba92ec62eb779754330584a7f6619e3bbe66"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "startLiquidation(uint256)",
          "executeLiquidation(uint256)",
          "cancelAuction(uint256,string)",
          "getCurrentDiscount(uint256)",
          "getGracePeriod(address)",
          "getAuction(uint256)",
          "isExecutable(uint256)",
          "getGracePeriodRemaining(uint256)",
          "setReputationScorer(address)",
          "setLendingPool(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DutchAuctionLiquidator",
            "src": "contracts/DutchAuctionLiquidator.sol:98"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "reputationScorer",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IReputationScorer)13249",
              "contract": "DutchAuctionLiquidator",
              "src": "contracts/DutchAuctionLiquidator.sol:58"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ILendingPool)13276",
              "contract": "DutchAuctionLiquidator",
              "src": "contracts/DutchAuctionLiquidator.sol:59"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(LiquidationAuction)13304_storage)",
              "contract": "DutchAuctionLiquidator",
              "src": "contracts/DutchAuctionLiquidator.sol:61"
            },
            {
              "label": "auctionCounter",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DutchAuctionLiquidator",
              "src": "contracts/DutchAuctionLiquidator.sol:62"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ILendingPool)13276": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IReputationScorer)13249": {
              "label": "contract IReputationScorer",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_struct(LiquidationAuction)13304_storage)": {
              "label": "mapping(uint256 => struct DutchAuctionLiquidator.LiquidationAuction)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidationAuction)13304_storage": {
              "label": "struct DutchAuctionLiquidator.LiquidationAuction",
              "members": [
                {
                  "label": "loanId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "borrower",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "debtAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "collateralAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "gracePeriodEnd",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "auctionDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "maxDiscount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "executor",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "8"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/DutchAuctionLiquidator.sol:ILendingPool": {
        "src": "contracts/DutchAuctionLiquidator.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLoan(uint256)",
          "liquidateLoan(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/DutchAuctionLiquidator.sol:IReputationScorer": {
        "src": "contracts/DutchAuctionLiquidator.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "scores(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/HealthFactorMonitor.sol:HealthFactorMonitor": {
        "src": "contracts/HealthFactorMonitor.sol:32",
        "version": {
          "withMetadata": "543fc34ed2eca80ba53954acfda62c7a60e0053aac2fe943c468a57f31c6510a",
          "withoutMetadata": "f8d1c56d5720ad7234b1673f167385bdff5d3402f9162e7baa4bbd39f460adf3",
          "linkedWithoutMetadata": "f8d1c56d5720ad7234b1673f167385bdff5d3402f9162e7baa4bbd39f460adf3"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "calculateHealthFactor(address,uint256)",
          "isLiquidatable(address,uint256)",
          "getHealthStatus(address,uint256)",
          "batchCalculateHealthFactors(address[],uint256[])",
          "getRiskLevel(address,uint256)",
          "getRequiredCollateral(address,uint256,uint256)",
          "setReputationScorer(address)",
          "setLendingPool(address)",
          "setPriceOracle(address)",
          "updateOracle(address)",
          "updateLiquidationThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HealthFactorMonitor",
            "src": "contracts/HealthFactorMonitor.sol:78"
          },
          {
            "kind": "state-variable-assignment",
            "name": "LIQUIDATION_THRESHOLD",
            "src": "contracts/HealthFactorMonitor.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "reputationScorer",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IReputationScorer)13843",
              "contract": "HealthFactorMonitor",
              "src": "contracts/HealthFactorMonitor.sol:47"
            },
            {
              "label": "lendingPool",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ILendingPool)13863",
              "contract": "HealthFactorMonitor",
              "src": "contracts/HealthFactorMonitor.sol:48"
            },
            {
              "label": "priceOracle",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IPriceOracle)13871",
              "contract": "HealthFactorMonitor",
              "src": "contracts/HealthFactorMonitor.sol:49"
            },
            {
              "label": "healthStatuses",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HealthStatus)13887_storage))",
              "contract": "HealthFactorMonitor",
              "src": "contracts/HealthFactorMonitor.sol:52"
            },
            {
              "label": "LIQUIDATION_THRESHOLD",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "HealthFactorMonitor",
              "src": "contracts/HealthFactorMonitor.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ILendingPool)13863": {
              "label": "contract ILendingPool",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceOracle)13871": {
              "label": "contract IPriceOracle",
              "numberOfBytes": "20"
            },
            "t_contract(IReputationScorer)13843": {
              "label": "contract IReputationScorer",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HealthStatus)13887_storage))": {
              "label": "mapping(address => mapping(uint256 => struct HealthFactorMonitor.HealthStatus))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(HealthStatus)13887_storage)": {
              "label": "mapping(uint256 => struct HealthFactorMonitor.HealthStatus)",
              "numberOfBytes": "32"
            },
            "t_struct(HealthStatus)13887_storage": {
              "label": "struct HealthFactorMonitor.HealthStatus",
              "members": [
                {
                  "label": "collateralValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "debtValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "dynamicLTV",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "healthFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "liquidatable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "lastUpdate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/HealthFactorMonitor.sol:ILendingPool": {
        "src": "contracts/HealthFactorMonitor.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/HealthFactorMonitor.sol:IPriceOracle": {
        "src": "contracts/HealthFactorMonitor.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/HealthFactorMonitor.sol:IReputationScorer": {
        "src": "contracts/HealthFactorMonitor.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDynamicLTV(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/InsuranceFund.sol:InsuranceFund": {
        "src": "contracts/InsuranceFund.sol:14",
        "version": {
          "withMetadata": "b312c398a3647ec867d0991c350afac604a86b994a02a6e12f44220c4c263db4",
          "withoutMetadata": "7398c2febe87bf01786b5f9b005f8c0c0bb83bbacda30f5edf1ea21023c814ba",
          "linkedWithoutMetadata": "7398c2febe87bf01786b5f9b005f8c0c0bb83bbacda30f5edf1ea21023c814ba"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "allocateRevenue(uint256)",
          "coverLoss(address,uint256,uint256,uint256)",
          "getMaxCoveragePercent(uint256)",
          "getAvailableCoverage(uint256)",
          "getStatistics()",
          "getCoverageHistory(uint256,uint256)",
          "getCoverageHistoryCount()",
          "canCoverLoss(uint256)",
          "getDefaultHistory(uint256)",
          "setAuthorizedRequestor(address,bool)",
          "emergencyWithdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "InsuranceFund",
            "src": "contracts/InsuranceFund.sol:70"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stablecoin",
            "src": "contracts/InsuranceFund.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "totalFunds",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "InsuranceFund",
              "src": "contracts/InsuranceFund.sol:31"
            },
            {
              "label": "totalCovered",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "InsuranceFund",
              "src": "contracts/InsuranceFund.sol:32"
            },
            {
              "label": "totalDefaults",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "InsuranceFund",
              "src": "contracts/InsuranceFund.sol:33"
            },
            {
              "label": "authorizedRequestors",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "InsuranceFund",
              "src": "contracts/InsuranceFund.sol:46"
            },
            {
              "label": "lenderContributions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "InsuranceFund",
              "src": "contracts/InsuranceFund.sol:49"
            },
            {
              "label": "coverageHistory",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_struct(CoverageRecord)14415_storage)dyn_storage",
              "contract": "InsuranceFund",
              "src": "contracts/InsuranceFund.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(CoverageRecord)14415_storage)dyn_storage": {
              "label": "struct InsuranceFund.CoverageRecord[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(CoverageRecord)14415_storage": {
              "label": "struct InsuranceFund.CoverageRecord",
              "members": [
                {
                  "label": "loanId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lender",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lossAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "coveredAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/LendingPoolV1.sol:LendingPoolV1": {
        "src": "contracts/LendingPoolV1.sol:26",
        "version": {
          "withMetadata": "31d42b75b80ed16cf58806c5a2495f2a05781d73e97e936f7cb71cedbe22b651",
          "withoutMetadata": "e1e343adcc6c29c617553d475958e9ae9c0456f217c5da64b21e8b4f0b50da34",
          "linkedWithoutMetadata": "e1e343adcc6c29c617553d475958e9ae9c0456f217c5da64b21e8b4f0b50da34"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "borrow(address,address,uint256,uint256)",
          "repay(address,uint256)",
          "liquidate(address,address,uint256)",
          "getBorrowRate(address,address)",
          "getPosition(address,address)",
          "getAssetConfig(address)",
          "enableAsset(address,bool,bool)",
          "setTreasury(address)",
          "setProtocolFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LendingPoolV1",
            "src": "contracts/LendingPoolV1.sol:117"
          },
          {
            "kind": "state-variable-assignment",
            "name": "protocolFeePercentage",
            "src": "contracts/LendingPoolV1.sol:88"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "creditRegistry",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(CreditRegistryV1_1)7082",
              "contract": "LendingPoolV1",
              "src": "contracts/LendingPoolV1.sol:52"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserPosition)15070_storage))",
              "contract": "LendingPoolV1",
              "src": "contracts/LendingPoolV1.sol:55"
            },
            {
              "label": "assetConfigs",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(AssetConfig)15083_storage)",
              "contract": "LendingPoolV1",
              "src": "contracts/LendingPoolV1.sol:58"
            },
            {
              "label": "lpDeposits",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "LendingPoolV1",
              "src": "contracts/LendingPoolV1.sol:61"
            },
            {
              "label": "supportedCollateral",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LendingPoolV1",
              "src": "contracts/LendingPoolV1.sol:64"
            },
            {
              "label": "supportedBorrowable",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LendingPoolV1",
              "src": "contracts/LendingPoolV1.sol:67"
            },
            {
              "label": "protocolFeePercentage",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "LendingPoolV1",
              "src": "contracts/LendingPoolV1.sol:88"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "LendingPoolV1",
              "src": "contracts/LendingPoolV1.sol:89"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(CreditRegistryV1_1)7082": {
              "label": "contract CreditRegistryV1_1",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(UserPosition)15070_storage))": {
              "label": "mapping(address => mapping(address => struct LendingPoolV1.UserPosition))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(AssetConfig)15083_storage)": {
              "label": "mapping(address => struct LendingPoolV1.AssetConfig)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserPosition)15070_storage)": {
              "label": "mapping(address => struct LendingPoolV1.UserPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AssetConfig)15083_storage": {
              "label": "struct LendingPoolV1.AssetConfig",
              "members": [
                {
                  "label": "enabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalDeposited",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalBorrowed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "utilizationRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "borrowRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "supplyRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(UserPosition)15070_storage": {
              "label": "struct LendingPoolV1.UserPosition",
              "members": [
                {
                  "label": "collateralAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "borrowedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "collateralAsset",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastAccrualTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "healthFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "creditTier",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ReputationScorer.sol:ReputationScorer": {
        "src": "contracts/ReputationScorer.sol:12",
        "version": {
          "withMetadata": "2d2b699665ee65c2878623eacbc9b5f4552fe69a57e2b4a609c2d2c75433de71",
          "withoutMetadata": "a5e6a6fd0c57f80f7d6ef2d8195a6501c1dfead36794e45515ad505139a3a959",
          "linkedWithoutMetadata": "a5e6a6fd0c57f80f7d6ef2d8195a6501c1dfead36794e45515ad505139a3a959"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "calculateScore(address,uint256)",
          "recordPayment(address,uint256,uint256,uint256,bool)",
          "recordWalletCreation(address)",
          "incrementProtocolInteractions(address)",
          "getScoreBreakdown(address)",
          "getPaymentHistory(address)",
          "getDynamicLTV(address)",
          "getCreditTier(address)",
          "setAuthorizedUpdater(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReputationScorer",
            "src": "contracts/ReputationScorer.sol:74"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "scores",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(CreditScore)16429_storage)",
              "contract": "ReputationScorer",
              "src": "contracts/ReputationScorer.sol:38"
            },
            {
              "label": "paymentHistory",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(PaymentRecord)16442_storage)dyn_storage)",
              "contract": "ReputationScorer",
              "src": "contracts/ReputationScorer.sol:39"
            },
            {
              "label": "walletCreationTime",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ReputationScorer",
              "src": "contracts/ReputationScorer.sol:40"
            },
            {
              "label": "protocolInteractions",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ReputationScorer",
              "src": "contracts/ReputationScorer.sol:41"
            },
            {
              "label": "authorizedUpdaters",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ReputationScorer",
              "src": "contracts/ReputationScorer.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PaymentRecord)16442_storage)dyn_storage": {
              "label": "struct ReputationScorer.PaymentRecord[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(PaymentRecord)16442_storage)dyn_storage)": {
              "label": "mapping(address => struct ReputationScorer.PaymentRecord[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(CreditScore)16429_storage)": {
              "label": "mapping(address => struct ReputationScorer.CreditScore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(CreditScore)16429_storage": {
              "label": "struct ReputationScorer.CreditScore",
              "members": [
                {
                  "label": "baseScore",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "paymentScore",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "walletAgeScore",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "protocolScore",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalScore",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "tier",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "ltv",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_struct(PaymentRecord)16442_storage": {
              "label": "struct ReputationScorer.PaymentRecord",
              "members": [
                {
                  "label": "loanId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "dueDate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "paidDate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "onTime",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "lateDays",
                  "type": "t_uint8",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ScoreOraclePhase3.sol:ScoreOraclePhase3": {
        "src": "contracts/ScoreOraclePhase3.sol:27",
        "version": {
          "withMetadata": "7ebefad249b6bdbae3d082728dc3e123934665c97697198dec86164ce1671c5d",
          "withoutMetadata": "1e3e416556cd99e51cd76332e4b93202cb16349cce0012645be5edba51267de1",
          "linkedWithoutMetadata": "1e3e416556cd99e51cd76332e4b93202cb16349cce0012645be5edba51267de1"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setAPRConfig(uint16,uint16,uint16)",
          "setRegistry(address payable)",
          "computeScore(address)",
          "getAPR(uint16)",
          "getScoreTier(uint16)",
          "hasRecentActivity(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ScoreOraclePhase3",
            "src": "contracts/ScoreOraclePhase3.sol:75"
          },
          {
            "kind": "state-variable-assignment",
            "name": "baseAPR",
            "src": "contracts/ScoreOraclePhase3.sol:44"
          },
          {
            "kind": "state-variable-assignment",
            "name": "minAPR",
            "src": "contracts/ScoreOraclePhase3.sol:45"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxAPR",
            "src": "contracts/ScoreOraclePhase3.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(CreditRegistryV2)8321",
              "contract": "ScoreOraclePhase3",
              "src": "contracts/ScoreOraclePhase3.sol:28"
            },
            {
              "label": "baseAPR",
              "offset": 20,
              "slot": "1",
              "type": "t_uint16",
              "contract": "ScoreOraclePhase3",
              "src": "contracts/ScoreOraclePhase3.sol:44"
            },
            {
              "label": "minAPR",
              "offset": 22,
              "slot": "1",
              "type": "t_uint16",
              "contract": "ScoreOraclePhase3",
              "src": "contracts/ScoreOraclePhase3.sol:45"
            },
            {
              "label": "maxAPR",
              "offset": 24,
              "slot": "1",
              "type": "t_uint16",
              "contract": "ScoreOraclePhase3",
              "src": "contracts/ScoreOraclePhase3.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(CreditRegistryV2)8321": {
              "label": "contract CreditRegistryV2",
              "numberOfBytes": "20"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ScoreOraclePhase3B.sol:ScoreOraclePhase3B": {
        "src": "contracts/ScoreOraclePhase3B.sol:21",
        "version": {
          "withMetadata": "7c1fb920efec4d5550ab59275435c4f1e2e9f12a952bd4e56707cf68c12032ff",
          "withoutMetadata": "09b3c72a46b8ba50638db563f04abdec19abca7f60d77a3ba114e29a86cfb47e",
          "linkedWithoutMetadata": "09b3c72a46b8ba50638db563f04abdec19abca7f60d77a3ba114e29a86cfb47e"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "computeScore(address)",
          "getScoreTier(uint16)",
          "getAPR(uint16)",
          "addChainSelector(uint64)",
          "removeChainSelector(uint64)",
          "getSupportedChainSelectors()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ScoreOraclePhase3B",
            "src": "contracts/ScoreOraclePhase3B.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(CreditRegistryV3)9636",
              "contract": "ScoreOraclePhase3B",
              "src": "contracts/ScoreOraclePhase3B.sol:24"
            },
            {
              "label": "supportedChainSelectors",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint64)dyn_storage",
              "contract": "ScoreOraclePhase3B",
              "src": "contracts/ScoreOraclePhase3B.sol:27"
            },
            {
              "label": "isSupportedChain",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint64,t_bool)",
              "contract": "ScoreOraclePhase3B",
              "src": "contracts/ScoreOraclePhase3B.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(CreditRegistryV3)9636": {
              "label": "contract CreditRegistryV3",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint64,t_bool)": {
              "label": "mapping(uint64 => bool)",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ScoreOracleSimple.sol:ScoreOracleSimple": {
        "src": "contracts/ScoreOracleSimple.sol:12",
        "version": {
          "withMetadata": "def9696069ed1c1383a51066a16230567c22f669b81eabb4152b999456664f38",
          "withoutMetadata": "eae38bca0d4bec61a7ae02add82abe34d3a5b40216156ecf215f0218ed84077a",
          "linkedWithoutMetadata": "eae38bca0d4bec61a7ae02add82abe34d3a5b40216156ecf215f0218ed84077a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setAPRConfig(uint16,uint16,uint16)",
          "computeScore(address)",
          "getAPR(uint16)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ScoreOracleSimple",
            "src": "contracts/ScoreOracleSimple.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/ScoreOracleSimple.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "baseAPR",
            "src": "contracts/ScoreOracleSimple.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "minAPR",
            "src": "contracts/ScoreOracleSimple.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxAPR",
            "src": "contracts/ScoreOracleSimple.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "baseAPR",
              "offset": 20,
              "slot": "0",
              "type": "t_uint16",
              "contract": "ScoreOracleSimple",
              "src": "contracts/ScoreOracleSimple.sol:20"
            },
            {
              "label": "minAPR",
              "offset": 22,
              "slot": "0",
              "type": "t_uint16",
              "contract": "ScoreOracleSimple",
              "src": "contracts/ScoreOracleSimple.sol:21"
            },
            {
              "label": "maxAPR",
              "offset": 24,
              "slot": "0",
              "type": "t_uint16",
              "contract": "ScoreOracleSimple",
              "src": "contracts/ScoreOracleSimple.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/IAggregatorV3.sol:IAggregatorV3": {
        "src": "contracts/interfaces/IAggregatorV3.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/IZKVerifier.sol:IZKVerifier": {
        "src": "contracts/interfaces/IZKVerifier.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/mocks/MockERC20.sol:MockERC20": {
        "src": "contracts/mocks/MockERC20.sol:10",
        "version": {
          "withMetadata": "be72a920eaa64c1a4ab4255499ac10429ff91483d81ee738a4a9fae5a821f6bd",
          "withoutMetadata": "c0aacc664ac5a050a58283ed506327feb10b22df20ff04de6561cd896a223df3",
          "linkedWithoutMetadata": "c0aacc664ac5a050a58283ed506327feb10b22df20ff04de6561cd896a223df3"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mocks/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "MockERC20",
              "src": "contracts/mocks/MockERC20.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/mocks/MockLendingPool.sol:MockLendingPool": {
        "src": "contracts/mocks/MockLendingPool.sol:8",
        "version": {
          "withMetadata": "a339cb461a8112437fe87d322dc92a2113b6206836636677da9047d5532dfc0e",
          "withoutMetadata": "f841f52437f4625074c97ce3747debd9ef33adeb2bb080cfadd45ebb83f2144d",
          "linkedWithoutMetadata": "f841f52437f4625074c97ce3747debd9ef33adeb2bb080cfadd45ebb83f2144d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setLoan(uint256,address,uint256,uint256,bool)",
          "getLoan(uint256)",
          "liquidateLoan(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "loans",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_struct(Loan)19389_storage)",
              "contract": "MockLendingPool",
              "src": "contracts/mocks/MockLendingPool.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_struct(Loan)19389_storage)": {
              "label": "mapping(uint256 => struct MockLendingPool.Loan)",
              "numberOfBytes": "32"
            },
            "t_struct(Loan)19389_storage": {
              "label": "struct MockLendingPool.Loan",
              "members": [
                {
                  "label": "borrower",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collateralAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "borrowedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "interestRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/mocks/MockV3Aggregator.sol:MockV3Aggregator": {
        "src": "contracts/mocks/MockV3Aggregator.sol:8",
        "version": {
          "withMetadata": "792c2442482844b573f1ddacb41c52e37a5a35b5a926b0883b4194c7a00ff970",
          "withoutMetadata": "b4ad5e8657c6e876234d2925861e253b5f55e6279239137ae2ea23a30a67ffd7",
          "linkedWithoutMetadata": "b4ad5e8657c6e876234d2925861e253b5f55e6279239137ae2ea23a30a67ffd7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint8,int256)",
          "updateAnswer(int256)",
          "updateRoundData(uint80,int256,uint256,uint256)",
          "getRoundData(uint80)",
          "latestRoundData()",
          "description()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockV3Aggregator",
            "src": "contracts/mocks/MockV3Aggregator.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "decimals",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "MockV3Aggregator",
              "src": "contracts/mocks/MockV3Aggregator.sol:9"
            },
            {
              "label": "latestAnswer",
              "offset": 0,
              "slot": "1",
              "type": "t_int256",
              "contract": "MockV3Aggregator",
              "src": "contracts/mocks/MockV3Aggregator.sol:10"
            },
            {
              "label": "latestTimestamp",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "MockV3Aggregator",
              "src": "contracts/mocks/MockV3Aggregator.sol:11"
            },
            {
              "label": "latestRound",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "MockV3Aggregator",
              "src": "contracts/mocks/MockV3Aggregator.sol:12"
            },
            {
              "label": "getAnswer",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_int256)",
              "contract": "MockV3Aggregator",
              "src": "contracts/mocks/MockV3Aggregator.sol:14"
            },
            {
              "label": "getTimestamp",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "MockV3Aggregator",
              "src": "contracts/mocks/MockV3Aggregator.sol:15"
            },
            {
              "label": "getStartedAt",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "MockV3Aggregator",
              "src": "contracts/mocks/MockV3Aggregator.sol:16"
            }
          ],
          "types": {
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_int256)": {
              "label": "mapping(uint256 => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/upgradeable/CreditRegistryV3Upgradeable.sol:CreditRegistryV3Upgradeable": {
        "src": "contracts/upgradeable/CreditRegistryV3Upgradeable.sol:30",
        "version": {
          "withMetadata": "7a6bea3b2d2a9e44ba346eac31b179616b1c40e884c4eec112fca25f43b04a19",
          "withoutMetadata": "f4d018e6eba99d8353324d722b313f15b9fa995c2cbd2f3b473d505774e4ad30",
          "linkedWithoutMetadata": "f4d018e6eba99d8353324d722b313f15b9fa995c2cbd2f3b473d505774e4ad30"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA",
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "version()",
          "registerLoan(address,uint256)",
          "registerRepayment(uint256,uint256)",
          "registerLiquidation(uint256,uint256)",
          "recordCollateralData(uint256,address,uint256,uint16)",
          "getUserCollateralAssets(address)",
          "recordKYCProof(address,bytes32,uint256,bytes)",
          "depositStake(uint256,uint256)",
          "withdrawStake()",
          "receiveCrossChainScore(address,uint64,uint16)",
          "getCrossChainScore(address,uint64)",
          "recordVote(address,uint256)",
          "recordProposal(address,uint256)",
          "getGovernanceActivity(address)",
          "getLoan(uint256)",
          "getUserLoans(address)",
          "getAggregateCreditData(address)",
          "setLenderAuthorization(address,bool)",
          "setCCIPSenderAuthorization(address,bool)",
          "setGovernanceAuthorization(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "nextLoanId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "CreditRegistryV3Upgradeable",
              "src": "contracts/upgradeable/CreditRegistryV3Upgradeable.sol:139"
            },
            {
              "label": "loans",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(LoanRecord)19831_storage)",
              "contract": "CreditRegistryV3Upgradeable",
              "src": "contracts/upgradeable/CreditRegistryV3Upgradeable.sol:140"
            },
            {
              "label": "userLoanIds",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "CreditRegistryV3Upgradeable",
              "src": "contracts/upgradeable/CreditRegistryV3Upgradeable.sol:141"
            },
            {
              "label": "collateralData",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(CollateralData)19863_storage)",
              "contract": "CreditRegistryV3Upgradeable",
              "src": "contracts/upgradeable/CreditRegistryV3Upgradeable.sol:144"
            },
            {
              "label": "userCollateralAssets",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "CreditRegistryV3Upgradeable",
              "src": "contracts/upgradeable/CreditRegistryV3Upgradeable.sol:145"
            },
            {
              "label": "stakeToken",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "CreditRegistryV3Upgradeable",
              "src": "contracts/upgradeable/CreditRegistryV3Upgradeable.sol:148"
            },
            {
              "label": "crossChainScores",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint64,t_struct(CrossChainScore)19880_storage))",
              "contract": "CreditRegistryV3Upgradeable",
              "src": "contracts/upgradeable/CreditRegistryV3Upgradeable.sol:151"
            },
            {
              "label": "governanceActivity",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(GovernanceActivity)19887_storage)",
              "contract": "CreditRegistryV3Upgradeable",
              "src": "contracts/upgradeable/CreditRegistryV3Upgradeable.sol:154"
            },
            {
              "label": "aggregateCreditData",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(AggregateCreditData)19854_storage)",
              "contract": "CreditRegistryV3Upgradeable",
              "src": "contracts/upgradeable/CreditRegistryV3Upgradeable.sol:157"
            },
            {
              "label": "authorizedLenders",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CreditRegistryV3Upgradeable",
              "src": "contracts/upgradeable/CreditRegistryV3Upgradeable.sol:160"
            },
            {
              "label": "authorizedCCIPSenders",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CreditRegistryV3Upgradeable",
              "src": "contracts/upgradeable/CreditRegistryV3Upgradeable.sol:161"
            },
            {
              "label": "authorizedGovernance",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CreditRegistryV3Upgradeable",
              "src": "contracts/upgradeable/CreditRegistryV3Upgradeable.sol:162"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)330_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(LoanStatus)19815": {
              "label": "enum CreditRegistryV3Upgradeable.LoanStatus",
              "members": [
                "Unknown",
                "Active",
                "Repaid",
                "Liquidated"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint64,t_struct(CrossChainScore)19880_storage))": {
              "label": "mapping(address => mapping(uint64 => struct CreditRegistryV3Upgradeable.CrossChainScore))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(AggregateCreditData)19854_storage)": {
              "label": "mapping(address => struct CreditRegistryV3Upgradeable.AggregateCreditData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(GovernanceActivity)19887_storage)": {
              "label": "mapping(address => struct CreditRegistryV3Upgradeable.GovernanceActivity)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(CollateralData)19863_storage)": {
              "label": "mapping(uint256 => struct CreditRegistryV3Upgradeable.CollateralData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(LoanRecord)19831_storage)": {
              "label": "mapping(uint256 => struct CreditRegistryV3Upgradeable.LoanRecord)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(CrossChainScore)19880_storage)": {
              "label": "mapping(uint64 => struct CreditRegistryV3Upgradeable.CrossChainScore)",
              "numberOfBytes": "32"
            },
            "t_struct(AggregateCreditData)19854_storage": {
              "label": "struct CreditRegistryV3Upgradeable.AggregateCreditData",
              "members": [
                {
                  "label": "totalLoans",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "repaidLoans",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "liquidatedLoans",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "activeLoans",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalCollateralUsd18",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "totalBorrowedUsd18",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "maxLtvBorrowCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "firstSeen",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "kyc",
                  "type": "t_struct(KYCProof)19870_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "stake",
                  "type": "t_struct(StakeInfo)19875_storage",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "416"
            },
            "t_struct(CollateralData)19863_storage": {
              "label": "struct CreditRegistryV3Upgradeable.CollateralData",
              "members": [
                {
                  "label": "collateralToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collateralValueUsd18",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "principalUsd18",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "userScoreAtBorrow",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(CrossChainScore)19880_storage": {
              "label": "struct CreditRegistryV3Upgradeable.CrossChainScore",
              "members": [
                {
                  "label": "overallScore",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "updatedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(GovernanceActivity)19887_storage": {
              "label": "struct CreditRegistryV3Upgradeable.GovernanceActivity",
              "members": [
                {
                  "label": "voteCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposalCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastVoteTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(KYCProof)19870_storage": {
              "label": "struct CreditRegistryV3Upgradeable.KYCProof",
              "members": [
                {
                  "label": "credentialHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "verifiedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "expiresAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(LoanRecord)19831_storage": {
              "label": "struct CreditRegistryV3Upgradeable.LoanRecord",
              "members": [
                {
                  "label": "loanId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "borrower",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "principalUsd18",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "repaidUsd18",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "status",
                  "type": "t_enum(LoanStatus)19815",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "lender",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(StakeInfo)19875_storage": {
              "label": "struct CreditRegistryV3Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lockUntil",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/upgradeable/CreditVaultV3Upgradeable.sol:CreditVaultV3Upgradeable": {
        "src": "contracts/upgradeable/CreditVaultV3Upgradeable.sol:32",
        "version": {
          "withMetadata": "b464f3dc34a192ed6079e4cde9a53b99303ce0c68f2af9635b09c20ef681302d",
          "withoutMetadata": "fd6ac83253eb5e6e1d840f2e5fbc66923118d6caf4ac791dee3a17cd0de829d2",
          "linkedWithoutMetadata": "fd6ac83253eb5e6e1d840f2e5fbc66923118d6caf4ac791dee3a17cd0de829d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,address)",
          "version()",
          "borrow(address,uint256,uint256)",
          "repay(uint256,uint256)",
          "liquidate(uint256)",
          "calculateDebt(uint256)",
          "setAsset(address,address,bool)",
          "setInsurancePool(address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "registry",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(CreditRegistryV3Upgradeable)20890",
              "contract": "CreditVaultV3Upgradeable",
              "src": "contracts/upgradeable/CreditVaultV3Upgradeable.sol:59"
            },
            {
              "label": "oracle",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(ScoreOraclePhase3BUpgradeable)23003",
              "contract": "CreditVaultV3Upgradeable",
              "src": "contracts/upgradeable/CreditVaultV3Upgradeable.sol:60"
            },
            {
              "label": "priceOracle",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ChainlinkPriceOracle)6164",
              "contract": "CreditVaultV3Upgradeable",
              "src": "contracts/upgradeable/CreditVaultV3Upgradeable.sol:61"
            },
            {
              "label": "assets",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Asset)20935_storage)",
              "contract": "CreditVaultV3Upgradeable",
              "src": "contracts/upgradeable/CreditVaultV3Upgradeable.sol:63"
            },
            {
              "label": "vaultLoans",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(VaultLoanData)20930_storage)",
              "contract": "CreditVaultV3Upgradeable",
              "src": "contracts/upgradeable/CreditVaultV3Upgradeable.sol:64"
            },
            {
              "label": "insurancePool",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "CreditVaultV3Upgradeable",
              "src": "contracts/upgradeable/CreditVaultV3Upgradeable.sol:65"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)253_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)330_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_contract(ChainlinkPriceOracle)6164": {
              "label": "contract ChainlinkPriceOracle",
              "numberOfBytes": "20"
            },
            "t_contract(CreditRegistryV3Upgradeable)20890": {
              "label": "contract CreditRegistryV3Upgradeable",
              "numberOfBytes": "20"
            },
            "t_contract(ScoreOraclePhase3BUpgradeable)23003": {
              "label": "contract ScoreOraclePhase3BUpgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Asset)20935_storage)": {
              "label": "mapping(address => struct CreditVaultV3Upgradeable.Asset)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(VaultLoanData)20930_storage)": {
              "label": "mapping(uint256 => struct CreditVaultV3Upgradeable.VaultLoanData)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)20935_storage": {
              "label": "struct CreditVaultV3Upgradeable.Asset",
              "members": [
                {
                  "label": "allowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "priceFeed",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(VaultLoanData)20930_storage": {
              "label": "struct CreditVaultV3Upgradeable.VaultLoanData",
              "members": [
                {
                  "label": "collateralToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collateralAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "aprBps",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "startTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "graceStart",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "exists",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/upgradeable/ScoreOraclePhase3BUpgradeable.sol:ScoreOraclePhase3BUpgradeable": {
        "src": "contracts/upgradeable/ScoreOraclePhase3BUpgradeable.sol:28",
        "version": {
          "withMetadata": "70b2056b59d08c28683db92ad29bff329dcb0fe220b528dc4f6fe239c592875b",
          "withoutMetadata": "29573bc348ebf9f3083e0fbad16fec05c889673505a34f427f48a0ca76290e02",
          "linkedWithoutMetadata": "29573bc348ebf9f3083e0fbad16fec05c889673505a34f427f48a0ca76290e02"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address)",
          "version()",
          "computeScore(address)",
          "getScoreTier(uint16)",
          "getAPR(uint16)",
          "addChainSelector(uint64)",
          "removeChainSelector(uint64)",
          "getSupportedChainSelectors()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "registry",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(CreditRegistryV3Upgradeable)20890",
              "contract": "ScoreOraclePhase3BUpgradeable",
              "src": "contracts/upgradeable/ScoreOraclePhase3BUpgradeable.sol:31"
            },
            {
              "label": "supportedChainSelectors",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint64)dyn_storage",
              "contract": "ScoreOraclePhase3BUpgradeable",
              "src": "contracts/upgradeable/ScoreOraclePhase3BUpgradeable.sol:34"
            },
            {
              "label": "isSupportedChain",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint64,t_bool)",
              "contract": "ScoreOraclePhase3BUpgradeable",
              "src": "contracts/upgradeable/ScoreOraclePhase3BUpgradeable.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_uint64)dyn_storage": {
              "label": "uint64[]",
              "numberOfBytes": "32"
            },
            "t_contract(CreditRegistryV3Upgradeable)20890": {
              "label": "contract CreditRegistryV3Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint64,t_bool)": {
              "label": "mapping(uint64 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      }
    }
  ]
}